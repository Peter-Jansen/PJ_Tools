Group {
 name WindNoise
 selected true
 addUserKnob {20 User}
 addUserKnob {26 text l "" +STARTLINE T "<font size=\"+5\"> Wind Noise"}
 addUserKnob {26 text_1 l "" +STARTLINE T "<font style=\"color: #666666;\">v0.1 | <a href=\"https://www.linkedin.com/in/petejans/\" style=\"color: #6786b8;\">Peter Jansen</a>"}
 addUserKnob {26 text_2 l "" +STARTLINE T "<b>VERY BETA</b> first set curl noise to 0 amplitude. Play with <br>\nwind noise direction, speed and \npow (like a gamma on the noise). <br>\nIf setting any of the scales quite high,\ntry increasing the noise<br> epsilons in the\ntechy section."}
 addUserKnob {26 ""}
 addUserKnob {7 scale}
 scale 30
 addUserKnob {7 amplitude R 0 10}
 amplitude 120
 addUserKnob {3 octaves}
 octaves 1
 addUserKnob {26 text_3 l <b>Animation}
 addUserKnob {7 w l evolution}
 addUserKnob {7 w_rate l "evolution rate"}
 w_rate 0.5
 addUserKnob {26 text_4 l <b>Wind}
 addUserKnob {7 wind_noise_scale l "wind noise scale"}
 wind_noise_scale 60
 addUserKnob {3 wind_noise_octaves l "wind noise octaves"}
 wind_noise_octaves 1
 addUserKnob {7 wind_noise_pow l "wind noise pow" R 0 10}
 wind_noise_pow 4
 addUserKnob {13 wind_dir l direction}
 wind_dir {0 0 -1}
 addUserKnob {7 wind_speed l speed}
 wind_speed 4
 addUserKnob {26 text_5 l <b>Drag}
 addUserKnob {7 drag}
 addUserKnob {26 ""}
 addUserKnob {20 tech_grp l Techy n 1}
 addUserKnob {7 grad_eps l "gradient noise epsilon"}
 grad_eps 0.001
 addUserKnob {7 curl_eps l "curl noise epsilon"}
 curl_eps 3
 addUserKnob {20 endGroup n -1}
}
 Input {
  inputs 0
  name particles
  xpos -500
  ypos 151
 }
 ParticleBlinkScript {
  kernelSourceGroup 1
  kernelSource "\nint fastfloor( const float x ) \{ return x > 0 ? (int) x : (int) x - 1; \}\ninline float raw_noise_4d( const float x, const float y, const float z, const float w ) \n\{\nint simplex\[64]\[4] = \{\n    \{0,1,2,3\},\{0,1,3,2\},\{0,0,0,0\},\{0,2,3,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,2,3,0\},\n    \{0,2,1,3\},\{0,0,0,0\},\{0,3,1,2\},\{0,3,2,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,3,2,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{1,2,0,3\},\{0,0,0,0\},\{1,3,0,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,3,0,1\},\{2,3,1,0\},\n    \{1,0,2,3\},\{1,0,3,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,0,3,1\},\{0,0,0,0\},\{2,1,3,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{2,0,1,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,0,1,2\},\{3,0,2,1\},\{0,0,0,0\},\{3,1,2,0\},\n    \{2,1,0,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,1,0,2\},\{0,0,0,0\},\{3,2,0,1\},\{3,2,1,0\}\n\};\n    int perm\[512] = \{\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,\n\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n    \};\n   int grad4\[32]\[4]= \{\n    \{0,1,1,1\},  \{0,1,1,-1\},  \{0,1,-1,1\},  \{0,1,-1,-1\},\n    \{0,-1,1,1\}, \{0,-1,1,-1\}, \{0,-1,-1,1\}, \{0,-1,-1,-1\},\n    \{1,0,1,1\},  \{1,0,1,-1\},  \{1,0,-1,1\},  \{1,0,-1,-1\},\n    \{-1,0,1,1\}, \{-1,0,1,-1\}, \{-1,0,-1,1\}, \{-1,0,-1,-1\},\n    \{1,1,0,1\},  \{1,1,0,-1\},  \{1,-1,0,1\},  \{1,-1,0,-1\},\n    \{-1,1,0,1\}, \{-1,1,0,-1\}, \{-1,-1,0,1\}, \{-1,-1,0,-1\},\n    \{1,1,1,0\},  \{1,1,-1,0\},  \{1,-1,1,0\},  \{1,-1,-1,0\},\n    \{-1,1,1,0\}, \{-1,1,-1,0\}, \{-1,-1,1,0\}, \{-1,-1,-1,0\}\n   \};\n    float F4 = (sqrt(5.0f)-1.0)/4.0;\n    float G4 = (5.0-sqrt(5.0f))/20.0;\n    float n0, n1, n2, n3, n4;\n    float s = (x + y + z + w) * F4;\n    int i = fastfloor(x + s);\n    int j = fastfloor(y + s);\n    int k = fastfloor(z + s);\n    int l = fastfloor(w + s);\n    float t = (i + j + k + l) * G4;\n    float X0 = i - t;\n    float Y0 = j - t;\n    float Z0 = k - t;\n    float W0 = l - t;\n\n    float x0 = x - X0;\n    float y0 = y - Y0;\n    float z0 = z - Z0;\n    float w0 = w - W0;\n    int c1 = (x0 > y0) ? 32 : 0;\n    int c2 = (x0 > z0) ? 16 : 0;\n    int c3 = (y0 > z0) ? 8 : 0;\n    int c4 = (x0 > w0) ? 4 : 0;\n    int c5 = (y0 > w0) ? 2 : 0;\n    int c6 = (z0 > w0) ? 1 : 0;\n    int c = c1 + c2 + c3 + c4 + c5 + c6;\n\n    int i1, j1, k1, l1;\n    int i2, j2, k2, l2;\n    int i3, j3, k3, l3;\n    i1 = simplex\[c]\[0]>=3 ? 1 : 0;\n    j1 = simplex\[c]\[1]>=3 ? 1 : 0;\n    k1 = simplex\[c]\[2]>=3 ? 1 : 0;\n    l1 = simplex\[c]\[3]>=3 ? 1 : 0;\n    i2 = simplex\[c]\[0]>=2 ? 1 : 0;\n    j2 = simplex\[c]\[1]>=2 ? 1 : 0;\n    k2 = simplex\[c]\[2]>=2 ? 1 : 0;\n    l2 = simplex\[c]\[3]>=2 ? 1 : 0;\n    i3 = simplex\[c]\[0]>=1 ? 1 : 0;\n    j3 = simplex\[c]\[1]>=1 ? 1 : 0;\n    k3 = simplex\[c]\[2]>=1 ? 1 : 0;\n    l3 = simplex\[c]\[3]>=1 ? 1 : 0;\n    float x1 = x0 - i1 + G4;\n    float y1 = y0 - j1 + G4;\n    float z1 = z0 - k1 + G4;\n    float w1 = w0 - l1 + G4;\n    float x2 = x0 - i2 + 2.0*G4;\n    float y2 = y0 - j2 + 2.0*G4;\n    float z2 = z0 - k2 + 2.0*G4;\n    float w2 = w0 - l2 + 2.0*G4;\n    float x3 = x0 - i3 + 3.0*G4;\n    float y3 = y0 - j3 + 3.0*G4;\n    float z3 = z0 - k3 + 3.0*G4;\n    float w3 = w0 - l3 + 3.0*G4;\n    float x4 = x0 - 1.0 + 4.0*G4;\n    float y4 = y0 - 1.0 + 4.0*G4;\n    float z4 = z0 - 1.0 + 4.0*G4;\n    float w4 = w0 - 1.0 + 4.0*G4;\n    int ii = i & 255;\n    int jj = j & 255;\n    int kk = k & 255;\n    int ll = l & 255;\n    int gi0 = perm\[ii+perm\[jj+perm\[kk+perm\[ll]]]] % 32;\n    int gi1 = perm\[ii+i1+perm\[jj+j1+perm\[kk+k1+perm\[ll+l1]]]] % 32;\n    int gi2 = perm\[ii+i2+perm\[jj+j2+perm\[kk+k2+perm\[ll+l2]]]] % 32;\n    int gi3 = perm\[ii+i3+perm\[jj+j3+perm\[kk+k3+perm\[ll+l3]]]] % 32;\n    int gi4 = perm\[ii+1+perm\[jj+1+perm\[kk+1+perm\[ll+1]]]] % 32;\n    float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;\n    if(t0<0) n0 = 0.0;\n    else \{\n        t0 *= t0;\n        n0 = t0 * t0 * dot(float4(grad4\[gi0]\[0],grad4\[gi0]\[2],grad4\[gi0]\[3],grad4\[gi0]\[3]), float4(x0, y0, z0, w0));\n    \}\n    float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;\n    if(t1<0) n1 = 0.0;\n    else \{\n        t1 *= t1;\n        n1 = t1 * t1 * dot(float4(grad4\[gi1]\[0],grad4\[gi1]\[2],grad4\[gi1]\[3],grad4\[gi1]\[3]), float4(x1, y1, z1, w1));\n    \}\n    float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;\n    if(t2<0) n2 = 0.0;\n    else \{\n        t2 *= t2;\n        n2 = t2 * t2 * dot(float4(grad4\[gi2]\[0],grad4\[gi2]\[2],grad4\[gi2]\[3],grad4\[gi2]\[3]), float4(x2, y2, z2, w2));\n    \}\n    float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;\n    if(t3<0) n3 = 0.0;\n    else \{\n        t3 *= t3;\n        n3 = t3 * t3 * dot(float4(grad4\[gi3]\[0],grad4\[gi3]\[2],grad4\[gi3]\[3],grad4\[gi3]\[3]), float4(x3, y3, z3, w3));\n    \}\n    float t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;\n    if(t4<0) n4 = 0.0;\n    else \{\n        t4 *= t4;\n        n4 = t4 * t4 * dot(float4(grad4\[gi4]\[0],grad4\[gi4]\[2],grad4\[gi4]\[3],grad4\[gi4]\[3]), float4(x4, y4, z4, w4));\n    \}\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n\}\ninline float octave_noise_4d( const float octaves, const float persistence, const float scale, const float x, const float y, const float z, const float w ) \n\{\n    float total = 0;\n    float frequency = scale;\n    float amplitude = 1;\n    float maxAmplitude = 0;\n    for( int i=0; i < octaves; i++ ) \{\n        total += (float)raw_noise_4d( x * frequency, y * frequency, z * frequency, w * frequency ) * amplitude;\n\n        frequency *= 2;\n        maxAmplitude += amplitude;\n        amplitude *= persistence;\n    \}\n    return float(total / maxAmplitude);\n\}\n\nfloat3 gradientNoise(float3 P, float octaves, float persistence, float scale, float w, float epsilon)\{\n   // float epsilon = grad_eps;\n   // float3 P = float3(pos.x),pos.y, pos.z);\n    float noise_x1 = (float)octave_noise_4d(float(octaves),persistence,scale,P.x + epsilon, P.y, P.z,w);\n    float noise_x2 = (float)octave_noise_4d(float(octaves),persistence,scale,P.x - epsilon, P.y, P.z,w);\n    float noise_y1 = (float)octave_noise_4d(float(octaves),persistence,scale,P.x, P.y + epsilon, P.z,w);\n    float noise_y2 = (float)octave_noise_4d(float(octaves),persistence,scale,P.x, P.y - epsilon, P.z,w);\n    float noise_z1 = (float)octave_noise_4d(float(octaves),persistence,scale,P.x, P.y, P.z + epsilon,w);\n    float noise_z2 = (float)octave_noise_4d(float(octaves),persistence,scale,P.x, P.y, P.z - epsilon,w);\n\n    float grad_x = (noise_x1 - noise_x2) / (2.0 * epsilon);\n    float grad_y = (noise_y1 - noise_y2) / (2.0 * epsilon);\n    float grad_z = (noise_z1 - noise_z2) / (2.0 * epsilon);\n    return float3(grad_x, grad_y, grad_z);\n\}\n\nkernel Curl_Noise : ImageComputationKernel<ePixelWise>\n\{\n  // Declare the particle attributes as Images:\n  Image<eReadWrite> p_velocity;\n  Image<eReadWrite> p_position;\n  Image<eReadWrite> p_color;\n  Image<eReadWrite> p_mass;\n\n  // Declare our parameter storage\n  param:\n    float3 winddir;\n    float windspeed;\n    float wind_noise_scale;\n    int wind_noise_octaves;\n    int octaves;\n    float persistence;\n    float scale;\n    float _amount;\n    float _dt;\n    float w_offset;\n    float w_rate;\n    float _frame;\n    float grad_eps;\n    float curl_eps;\n    float wind_noise_pow;\n\n\n  // Define the parameters to the outside world\n  void define() \{\n    defineParam(octaves,      \"octaves\", 8);\n    defineParam(persistence, \"persistence\",  0.5f);\n    defineParam(scale, \"scale\", 0.001f);\n    defineParam(_amount, \"paAmount\", 0.0f);\n    defineParam(_dt, \"_dt\", 1.0f);\n    defineParam(w_offset, \"w\", 0.0f);\n\n  \}\n\n  void process() \{\n\n    float mass = p_mass();\n    float3 pos = float3(p_position(0), p_position(1), p_position(2));\n    float3 windPos = pos - (winddir*windspeed* _frame);\n\n    float w = (w_rate * _frame) + w_offset ;\n\n    float epsilon = curl_eps;\n\n    float3 eps_dx = float3(epsilon, 0, 0);\n    float3 eps_dy = float3(0,epsilon, 0);\n    float3 eps_dz = float3(0, 0, epsilon);\n\n    // Calculate gradients\n    float3 dx = gradientNoise(windPos + eps_dx, octaves, persistence, scale, w, grad_eps) - gradientNoise(windPos-eps_dx, octaves, persistence, scale, w, grad_eps);\n    float3 dy = gradientNoise(windPos + eps_dy, octaves, persistence, scale, w, grad_eps) - gradientNoise(windPos-eps_dy, octaves, persistence, scale, w, grad_eps);\n    float3 dz = gradientNoise(windPos + eps_dz, octaves, persistence, scale, w, grad_eps) - gradientNoise(windPos-eps_dz, octaves, persistence, scale, w, grad_eps);\n\n    // Normalize by the delta\n    dx /= 2*epsilon;\n    dy /= 2*epsilon;\n    dz /= 2*epsilon;\n\n    // Calculate the curl components\n    float curlX = dy.z - dz.y;\n    float curlY = dz.x - dx.z;\n    float curlZ = dx.y - dy.x;\n\n    // Create the curl vector\n    float3 curl = float3(curlX, curlY, curlZ);\n\n    \n    float windNoise = (octave_noise_4d(float(wind_noise_octaves),persistence,wind_noise_scale,windPos.x, windPos.y, windPos.z ,w) +1.0 )/ 2.0;\n    windNoise = pow(windNoise,wind_noise_pow);\n    float3 wind = winddir * windNoise * windspeed;\n\n\n    p_velocity()+= ((curl * _amount * windNoise) +wind)*(1/mass)* _dt;\n\n\n\n  \}\n\};\n"
  encodedSource "\n"
  name ParticleBlinkScript7
  selected true
  xpos -500
  ypos 252
  addUserKnob {20 User}
  addUserKnob {13 winddir}
  winddir {{parent.wind_dir} {parent.wind_dir} {parent.wind_dir}}
  addUserKnob {7 windspeed}
  windspeed {{parent.wind_speed}}
  addUserKnob {3 octaves}
  octaves {{parent.octaves}}
  addUserKnob {7 persistence}
  persistence 0.5
  addUserKnob {7 scale}
  scale {{1/parent.scale}}
  addUserKnob {7 paAmount l amount}
  paAmount {{parent.amplitude}}
  addUserKnob {7 w}
  w {{parent.w}}
  addUserKnob {7 grad_eps l "grad eps"}
  grad_eps {{parent.grad_eps}}
  addUserKnob {7 curl_eps l "curl eps"}
  curl_eps {{parent.curl_eps}}
  addUserKnob {7 w_rate l "w rate"}
  w_rate {{parent.w_rate}}
  addUserKnob {7 wind_noise_pow l "wind noise pow"}
  wind_noise_pow {{parent.wind_noise_pow}}
  addUserKnob {7 wind_noise_scale l "wind noise scale"}
  wind_noise_scale {{1/parent.wind_noise_scale}}
  addUserKnob {3 wind_noise_octaves l "wind noise octaves"}
  wind_noise_octaves {{parent.wind_noise_octaves}}
 }
 ParticleDrag2 {
  drag {{parent.drag}}
  name ParticleDrag2
  xpos -500
  ypos 346
 }
 Output {
  name Output1
  xpos -500
  ypos 452
 }
end_group
