Group {
 name ParticleWindCurlNoise
 selected true
 addUserKnob {20 User l "Wind Curl Noise"}
 addUserKnob {26 text l "" +STARTLINE T "<font size=\"+5\"> Wind Curl Noise"}
 addUserKnob {26 text_1 l "" +STARTLINE T "<font style=\"color: #666666;\">v2.0 | <a href=\"https://www.linkedin.com/in/petejans/\" style=\"color: #6786b8;\">Peter Jansen</a>"}
 addUserKnob {26 ""}
 addUserKnob {26 text_1_1 l "" +STARTLINE T "<font style=\"color: #666666;\"> <i>Hover over the knobs for help"}
 addUserKnob {26 text_3_1 l <b>Noise}
 addUserKnob {41 wind_scale l "wind scale" t "Frequency of the noise, roughly in world units. Higher vales = larger noise. Higher values recommended for that gusty wind look." T ParticleBlinkScript6.wind_scale}
 addUserKnob {41 wind_sharpness l "wind sharpness" t "Increase this to get more contrast in the noise. Higher values will create \"pockets\" of wind, surrounded by lower wind areas." T ParticleBlinkScript6.wind_sharpness}
 addUserKnob {26 text_3 l <b>Direction/Speed}
 addUserKnob {41 wind_direction l "wind direction" t "Cmon. You don't need a tooltip for this." T ParticleBlinkScript6.wind_direction}
 addUserKnob {41 wind_speed l "wind speed" t "Global speed. This affects both the force that pushes particles in the wind direction, and the curl noise that pushes them away from the high pressure areas." T ParticleBlinkScript6.wind_speed}
 addUserKnob {26 text_3_2 l "<b>4D Animation"}
 addUserKnob {41 wind_w_rate l "wind w rate" t "Animates the noise. Think of it kinda like animating the \"z\" slider of the noise node. Increasing this will make the noise animate faster. 0 = static noise, but it will still follow the wind direction." T ParticleBlinkScript6.wind_w_rate}
 addUserKnob {26 text_3_3 l "<b>Individual forces"}
 addUserKnob {41 push_strength l "push strength" t "A multiplier on the force that pushes the particles in the direction of the wind.\n" T ParticleBlinkScript6.push_strength}
 addUserKnob {41 curl_strength l "curl strength" t "A multiplier on the force that pushes the particles away from the \"pockets\" of high pressure." T ParticleBlinkScript6.curl_strength}
 addUserKnob {26 ""}
 addUserKnob {41 apply_mass l "Affected by mass" t "Include mass in the calculation. Particles with higher mass will be affected less." T ParticleBlinkScript6.apply_mass}
}
 Input {
  inputs 0
  name Input1
  xpos -383
  ypos 271
 }
 ParticleBlinkScript {
  kernelFile Z:/depts/comp/users/peter.jansen/blinkscripts/wind_noise_gpt5.cpp
  kernelSourceGroup 1
  kernelSource "kernel Wind_Noise : ImageComputationKernel<ePixelWise>\n\{\n  // Declare the particle attributes as Images:\n  Image<eReadWrite> p_velocity;\n  Image<eReadWrite> p_position;\n  Image<eReadWrite> p_mass;\n  Image<eReadWrite> p_conditions;\n  Image<eReadWrite> p_color;\n  \n  \n\n  // Declare our parameter storage\n  param:\n\n    float wind_scale;\n\tfloat wind_speed;\n\tfloat3 wind_direction;\n    float wind_w_rate;\n\tfloat wind_sharpness;\n\t\n\tfloat push_strength;\n\tfloat curl_strength;\n\tfloat advect_amount;\n\t\n    float _dt;\n    float _frame;\n\t\n\tbool apply_mass;\n\nlocal:\n\nint fastfloor( const float x ) \{ return x > 0 ? (int) x : (int) x - 1; \}\ninline float raw_noise_4d( const float x, const float y, const float z, const float w ) \n\{\nint simplex\[64]\[4] = \{\n    \{0,1,2,3\},\{0,1,3,2\},\{0,0,0,0\},\{0,2,3,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,2,3,0\},\n    \{0,2,1,3\},\{0,0,0,0\},\{0,3,1,2\},\{0,3,2,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,3,2,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{1,2,0,3\},\{0,0,0,0\},\{1,3,0,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,3,0,1\},\{2,3,1,0\},\n    \{1,0,2,3\},\{1,0,3,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,0,3,1\},\{0,0,0,0\},\{2,1,3,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{2,0,1,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,0,1,2\},\{3,0,2,1\},\{0,0,0,0\},\{3,1,2,0\},\n    \{2,1,0,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,1,0,2\},\{0,0,0,0\},\{3,2,0,1\},\{3,2,1,0\}\n\};\n    int perm\[512] = \{\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,\n\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n    \};\n   int grad4\[32]\[4]= \{\n    \{0,1,1,1\},  \{0,1,1,-1\},  \{0,1,-1,1\},  \{0,1,-1,-1\},\n    \{0,-1,1,1\}, \{0,-1,1,-1\}, \{0,-1,-1,1\}, \{0,-1,-1,-1\},\n    \{1,0,1,1\},  \{1,0,1,-1\},  \{1,0,-1,1\},  \{1,0,-1,-1\},\n    \{-1,0,1,1\}, \{-1,0,1,-1\}, \{-1,0,-1,1\}, \{-1,0,-1,-1\},\n    \{1,1,0,1\},  \{1,1,0,-1\},  \{1,-1,0,1\},  \{1,-1,0,-1\},\n    \{-1,1,0,1\}, \{-1,1,0,-1\}, \{-1,-1,0,1\}, \{-1,-1,0,-1\},\n    \{1,1,1,0\},  \{1,1,-1,0\},  \{1,-1,1,0\},  \{1,-1,-1,0\},\n    \{-1,1,1,0\}, \{-1,1,-1,0\}, \{-1,-1,1,0\}, \{-1,-1,-1,0\}\n   \};\n    float F4 = (sqrt(5.0f)-1.0)/4.0;\n    float G4 = (5.0-sqrt(5.0f))/20.0;\n    float n0, n1, n2, n3, n4;\n    float s = (x + y + z + w) * F4;\n    int i = fastfloor(x + s);\n    int j = fastfloor(y + s);\n    int k = fastfloor(z + s);\n    int l = fastfloor(w + s);\n    float t = (i + j + k + l) * G4;\n    float X0 = i - t;\n    float Y0 = j - t;\n    float Z0 = k - t;\n    float W0 = l - t;\n\n    float x0 = x - X0;\n    float y0 = y - Y0;\n    float z0 = z - Z0;\n    float w0 = w - W0;\n    int c1 = (x0 > y0) ? 32 : 0;\n    int c2 = (x0 > z0) ? 16 : 0;\n    int c3 = (y0 > z0) ? 8 : 0;\n    int c4 = (x0 > w0) ? 4 : 0;\n    int c5 = (y0 > w0) ? 2 : 0;\n    int c6 = (z0 > w0) ? 1 : 0;\n    int c = c1 + c2 + c3 + c4 + c5 + c6;\n\n    int i1, j1, k1, l1;\n    int i2, j2, k2, l2;\n    int i3, j3, k3, l3;\n    i1 = simplex\[c]\[0]>=3 ? 1 : 0;\n    j1 = simplex\[c]\[1]>=3 ? 1 : 0;\n    k1 = simplex\[c]\[2]>=3 ? 1 : 0;\n    l1 = simplex\[c]\[3]>=3 ? 1 : 0;\n    i2 = simplex\[c]\[0]>=2 ? 1 : 0;\n    j2 = simplex\[c]\[1]>=2 ? 1 : 0;\n    k2 = simplex\[c]\[2]>=2 ? 1 : 0;\n    l2 = simplex\[c]\[3]>=2 ? 1 : 0;\n    i3 = simplex\[c]\[0]>=1 ? 1 : 0;\n    j3 = simplex\[c]\[1]>=1 ? 1 : 0;\n    k3 = simplex\[c]\[2]>=1 ? 1 : 0;\n    l3 = simplex\[c]\[3]>=1 ? 1 : 0;\n    float x1 = x0 - i1 + G4;\n    float y1 = y0 - j1 + G4;\n    float z1 = z0 - k1 + G4;\n    float w1 = w0 - l1 + G4;\n    float x2 = x0 - i2 + 2.0*G4;\n    float y2 = y0 - j2 + 2.0*G4;\n    float z2 = z0 - k2 + 2.0*G4;\n    float w2 = w0 - l2 + 2.0*G4;\n    float x3 = x0 - i3 + 3.0*G4;\n    float y3 = y0 - j3 + 3.0*G4;\n    float z3 = z0 - k3 + 3.0*G4;\n    float w3 = w0 - l3 + 3.0*G4;\n    float x4 = x0 - 1.0 + 4.0*G4;\n    float y4 = y0 - 1.0 + 4.0*G4;\n    float z4 = z0 - 1.0 + 4.0*G4;\n    float w4 = w0 - 1.0 + 4.0*G4;\n    int ii = i & 255;\n    int jj = j & 255;\n    int kk = k & 255;\n    int ll = l & 255;\n    int gi0 = perm\[ii+perm\[jj+perm\[kk+perm\[ll]]]] % 32;\n    int gi1 = perm\[ii+i1+perm\[jj+j1+perm\[kk+k1+perm\[ll+l1]]]] % 32;\n    int gi2 = perm\[ii+i2+perm\[jj+j2+perm\[kk+k2+perm\[ll+l2]]]] % 32;\n    int gi3 = perm\[ii+i3+perm\[jj+j3+perm\[kk+k3+perm\[ll+l3]]]] % 32;\n    int gi4 = perm\[ii+1+perm\[jj+1+perm\[kk+1+perm\[ll+1]]]] % 32;\n    float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;\n    if(t0<0) n0 = 0.0;\n    else \{\n        t0 *= t0;\n        n0 = t0 * t0 * dot(float4(grad4\[gi0]\[0],grad4\[gi0]\[2],grad4\[gi0]\[3],grad4\[gi0]\[3]), float4(x0, y0, z0, w0));\n    \}\n    float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;\n    if(t1<0) n1 = 0.0;\n    else \{\n        t1 *= t1;\n        n1 = t1 * t1 * dot(float4(grad4\[gi1]\[0],grad4\[gi1]\[2],grad4\[gi1]\[3],grad4\[gi1]\[3]), float4(x1, y1, z1, w1));\n    \}\n    float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;\n    if(t2<0) n2 = 0.0;\n    else \{\n        t2 *= t2;\n        n2 = t2 * t2 * dot(float4(grad4\[gi2]\[0],grad4\[gi2]\[2],grad4\[gi2]\[3],grad4\[gi2]\[3]), float4(x2, y2, z2, w2));\n    \}\n    float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;\n    if(t3<0) n3 = 0.0;\n    else \{\n        t3 *= t3;\n        n3 = t3 * t3 * dot(float4(grad4\[gi3]\[0],grad4\[gi3]\[2],grad4\[gi3]\[3],grad4\[gi3]\[3]), float4(x3, y3, z3, w3));\n    \}\n    float t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;\n    if(t4<0) n4 = 0.0;\n    else \{\n        t4 *= t4;\n        n4 = t4 * t4 * dot(float4(grad4\[gi4]\[0],grad4\[gi4]\[2],grad4\[gi4]\[3],grad4\[gi4]\[3]), float4(x4, y4, z4, w4));\n    \}\n\tfloat remap = (27.0 * (n0 + n1 + n2 + n3 + n4) + 1.0) / 2.0; //remap 0-1;\n    return pow(remap, wind_sharpness);\n\}\n\n\n// Apply wind + curl force to a particle\n// Assumes raw_noise_4d(x, y, z, w) is defined elsewhere\n\ninline float3 wind_curl_force(\n    float3 p,             // particle position\n    float time,           // time or noise 'w' param\n    float3 wind_dir,      // wind direction (should be normalized)\n    float noise_scale,    // spatial scale of the noise\n    float advect_amount,  // how far to offset noise along wind_dir\n    float eps,            // curl finite difference offset (small value)\n    float push_strength,  // scalar push strength from pressure pockets\n    float curl_strength,  // scalar strength of curl force\n    float mass,           // particle mass\n    float dt              // timestep\n)\n\{\n    //-----------------------\n    // 1. Advect noise coordinates\n    //-----------------------\n    float3 advected_p = p + wind_dir * advect_amount;\n    float3 np = advected_p;\n\n    //-----------------------\n    // 2. Base scalar noise at particle position\n    //-----------------------\n    float N1 = raw_noise_4d(np.x, np.y, np.z, time);\n    float N2 = raw_noise_4d(np.y, np.z, np.x, time);\n    float N3 = raw_noise_4d(np.z, np.x, np.y, time);\n\n    //-----------------------\n    // 3. Pressure push (along wind direction)\n    //-----------------------\n    float3 push_force = wind_dir * (N1 * push_strength);\n\n    //-----------------------\n    // 4. Curl calculation (central differences, 12 calls)\n    //-----------------------\n    float3 ex = float3(eps, 0.0f, 0.0f);\n    float3 ey = float3(0.0f, eps, 0.0f);\n    float3 ez = float3(0.0f, 0.0f, eps);\n\n    // p + ey\n    float Fx_ey_p = raw_noise_4d((np + ey).x, (np + ey).y, (np + ey).z, time);\n    float Fy_ey_p = raw_noise_4d((np.y + ey.x), (np.z + ey.y), (np.x + ey.z), time);\n    float Fz_ey_p = raw_noise_4d((np.z + ey.x), (np.x + ey.y), (np.y + ey.z), time);\n\n    // p - ey\n    float Fx_ey_m = raw_noise_4d((np - ey).x, (np - ey).y, (np - ey).z, time);\n    float Fy_ey_m = raw_noise_4d((np.y - ey.x), (np.z - ey.y), (np.x - ey.z), time);\n    float Fz_ey_m = raw_noise_4d((np.z - ey.x), (np.x - ey.y), (np.y - ey.z), time);\n\n    // p + ez\n    float Fx_ez_p = raw_noise_4d((np + ez).x, (np + ez).y, (np + ez).z, time);\n    float Fy_ez_p = raw_noise_4d((np.y + ez.x), (np.z + ez.y), (np.x + ez.z), time);\n    float Fz_ez_p = raw_noise_4d((np.z + ez.x), (np.x + ez.y), (np.y + ez.z), time);\n\n    // p - ez\n    float Fx_ez_m = raw_noise_4d((np - ez).x, (np - ez).y, (np - ez).z, time);\n    float Fy_ez_m = raw_noise_4d((np.y - ez.x), (np.z - ez.y), (np.x - ez.z), time);\n    float Fz_ez_m = raw_noise_4d((np.z - ez.x), (np.x - ez.y), (np.y - ez.z), time);\n\n    // p + ex\n    float Fx_ex_p = raw_noise_4d((np + ex).x, (np + ex).y, (np + ex).z, time);\n    float Fy_ex_p = raw_noise_4d((np.y + ex.x), (np.z + ex.y), (np.x + ex.z), time);\n    float Fz_ex_p = raw_noise_4d((np.z + ex.x), (np.x + ex.y), (np.y + ex.z), time);\n\n    // p - ex\n    float Fx_ex_m = raw_noise_4d((np - ex).x, (np - ex).y, (np - ex).z, time);\n    float Fy_ex_m = raw_noise_4d((np.y - ex.x), (np.z - ex.y), (np.x - ex.z), time);\n    float Fz_ex_m = raw_noise_4d((np.z - ex.x), (np.x - ex.y), (np.y - ex.z), time);\n\n    // Curl components\n    float curl_x = (Fz_ey_p - Fz_ey_m) / (2.0f * eps)\n                 - (Fy_ez_p - Fy_ez_m) / (2.0f * eps);\n\n    float curl_y = (Fx_ez_p - Fx_ez_m) / (2.0f * eps)\n                 - (Fz_ex_p - Fz_ex_m) / (2.0f * eps);\n\n    float curl_z = (Fy_ex_p - Fy_ex_m) / (2.0f * eps)\n                 - (Fx_ey_p - Fx_ey_m) / (2.0f * eps);\n\n    float3 curl_force = float3(curl_x, curl_y, curl_z) * curl_strength;\n\n    //-----------------------\n    // 5. Total force, mass & timestep scaling\n    //-----------------------\n    float3 total_force = push_force + curl_force;\n\tfloat3 accel = total_force;\n\tif (apply_mass)\{\n\t\taccel = total_force / mass;\n\t\}\n\t\n    \n\n    return accel * dt; // integrate velocity outside\n\}\n\n\n\n\n  void process() \{\n\tif (!p_conditions()) return;\n\tfloat3 pos = float3(p_position(0), p_position(1), p_position(2));\n\tfloat3 wind_velocity = -wind_direction * wind_speed;\n\tfloat3 wind_pos = (pos / wind_scale) + wind_velocity * (_frame/24.0);\n\n\tfloat3 delta_v = wind_curl_force(\n\t\twind_pos,      // particle position\n\t\t_frame * wind_w_rate / 24.0,             // time or animation param\n\t\tnormalize(wind_direction),\n\t\twind_scale,\n\t\tadvect_amount,\n\t\t0.01,\n\t\tpush_strength * wind_speed,\n\t\tcurl_strength * wind_speed * .1,\n\t\tp_mass(),\n\t\t_dt\n\t);\n\np_velocity() += delta_v;\n  \}\n\};"
  region_invert true
  translate {0 5.450000286 0}
  uniform_scale 10
  name ParticleBlinkScript6
  xpos -383
  ypos 331
  addUserKnob {20 User}
  addUserKnob {7 wind_scale l "wind scale"}
  wind_scale 10
  addUserKnob {7 wind_speed l "wind speed"}
  wind_speed 1
  addUserKnob {13 wind_direction l "wind direction"}
  wind_direction {0 0 1}
  addUserKnob {7 wind_w_rate l "wind w rate"}
  wind_w_rate 0.5
  addUserKnob {7 wind_sharpness l "wind sharpness"}
  wind_sharpness 2
  addUserKnob {7 push_strength l "push strength"}
  push_strength 1
  addUserKnob {7 curl_strength l "curl strength"}
  curl_strength 1
  addUserKnob {7 advect_amount l "advect amount"}
  advect_amount 1
  addUserKnob {6 apply_mass l "apply mass" -STARTLINE}
 }
 Output {
  name Output1
  xpos -383
  ypos 411
 }
end_group
