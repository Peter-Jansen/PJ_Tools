Group {
 name TaupoRenderRefactor
 tile_color 0x9c0000ff
 selected true
 addUserKnob {20 User l "Taupo Render"}
 addUserKnob {26 taupo_render_title l "" t "Because Krakatoa used to be a sweet particle renderer, and Taupo is a supervolcano in New Zealand. " +STARTLINE T "<font size=\"+5\"> Taupo Render"}
 addUserKnob {26 about l "" +STARTLINE T "<font style=\"color: #666666;\">vREFACTOR_TEST | <a href=\"https://www.linkedin.com/in/petejans/\" style=\"color: #6786b8;\">Peter Jansen</a>"}
 addUserKnob {26 ""}
 addUserKnob {41 format T BlinkScript3.format}
 addUserKnob {4 merge_operation l "merge mode" +INVISIBLE M {additive over}}
 merge_operation over
 addUserKnob {26 size_text l <b>Size}
 addUserKnob {4 size_mode l "size mode" +INVISIBLE M {2D 3D ""}}
 size_mode 3D
 addUserKnob {7 size_mult l "size multiplier" R 0 10}
 size_mult 1
 addUserKnob {7 min_size l "min size" R 0 2}
 addUserKnob {26 text l <b>Replicator}
 addUserKnob {3 duplicates}
 addUserKnob {7 duplicate_radius l radius}
 duplicate_radius 1
 addUserKnob {26 dist_fade_text l "<b>Fade by Distance"}
 addUserKnob {7 fade_near l near R 0 100}
 fade_near 1
 addUserKnob {7 fade_near_falloff l "near falloff" R 0 100}
 addUserKnob {7 fade_far l far R 0 1000}
 fade_far 1000
 addUserKnob {7 fade_far_falloff l "far falloff" R 0 100}
 addUserKnob {7 falloff_gamma l gamma}
 falloff_gamma 1
 addUserKnob {26 mb_text l "<b>Motion Blur"}
 addUserKnob {7 shutter}
 shutter 1
 addUserKnob {4 shutter_type l "shutter offset" M {start centered end ""}}
 shutter_type centered
 addUserKnob {3 max_steps l "max steps"}
 max_steps 128
 addUserKnob {7 spacing R 0 10}
 spacing 1
}
 Input {
  inputs 0
  name cam
  xpos 454
  ypos -108
  number 1
 }
 Camera {
  projection_mode {{"\[expression \[value the_cam]projection_mode(\[value the_frame])]"}}
  focal {{"\[expression \[value the_cam]focal(\[value the_frame])]"}}
  haperture {{"\[expression \[value the_cam]haperture(\[value the_frame])]"}}
  vaperture {{"\[expression \[value the_cam]vaperture(\[value the_frame])]"}}
  near {{"\[expression \[value the_cam]near(\[value the_frame])]"}}
  far {{"\[expression \[value the_cam]far(\[value the_frame])]"}}
  win_translate {{"\[expression \[value the_cam]win_translate.u(\[value the_frame])]"} {"\[expression \[value the_cam]win_translate.v(\[value the_frame])]"}}
  win_scale {{"\[expression \[value the_cam]win_scale.u(\[value the_frame])]"} {"\[expression \[value the_cam]win_scale.v(\[value the_frame])]"}}
  winroll {{"\[expression \[value the_cam]winroll(\[value the_frame])]"}}
  focal_point {{"\[expression \[value the_cam]focal_point(\[value the_frame])]"}}
  fstop {{"\[expression \[value the_cam]fstop(\[value the_frame])]"}}
  name DummyCam
  help "DummyCam by Adrian Pueyo\n\nCamera that apart from the matrices also grabs all the \"Projection\" values from the upstream camera that it's connected to. Turns into a default Camera if no Camera connected. Can also be used inside of groups and gizmos, as many levels deep as you want :D All using live and super fast TCL.\n\nUpdated v1.1: Now grabs the correct frame too (thanks Erwan Leroy for the idea).\n\nadrianpueyo.com, 2019-2020"
  onCreate "n = nuke.thisNode()\nfor k in \[\"projection_mode\",\"focal\",\"haperture\",\"vaperture\",\"near\",\"far\",\"win_translate\",\"win_scale\",\"winroll\",\"focal_point\",\"fstop\"]:\n    n\[k].setFlag(0x0000000010000000)"
  label "\[value \[value the_cam]name]"
  xpos 464
  ypos -13
  addUserKnob {20 DummyCam l Defaults}
  addUserKnob {43 the_cam}
  the_cam "\[\n#DummyCam v1.1. Updated 5 April 2020.\nset starting_point \"this.input0\"\nset default \"this.d_\"\n\n# If cam has no inputs, return the default.\nif \{\[exists \$starting_point]\} \{\n    set x \[node \$starting_point]\n\} \{ \n    return \$default\n\}\n\nset finished 0\nwhile \{\$finished != 1\} \{\n\n    # First look for a Cam or Input or topnode.\n    while \{\[class \$x] != \"Camera2\" && \[class \$x] != \"Camera\" && \[class \$x] != \"Camera3\" && \[class \$x] != \"Input\" && \$x != \[topnode \$x]\} \{\n        set x \[node \$x.input0]\n    \}\n\n    # Then, check if node is a cam (and return), and otherwise, if it's an input, see if the parent exists and move to it.\n    if \{\[class \$x]==\"Camera2\"||\[class \$x]==\"Camera3\"||\[class \$x]==\"Camera\"\} \{\n        set x \[append x \".\"]\n        return \$x\n    \} \{ \n        if \{ \[class \$x]==\"Input\" \} \{ \n            set inp \"\$x.parent.input\"\n            set inputNum \[value \$x.number]\n            set inp \[append inp \$inputNum]\n            if \{ \[exists \$inp] \} \{\n                set x \[node \$inp]\n            \} \{ \n                set finished 1\n            \}\n        \} \{ \n            set finished 1\n        \}\n    \}\n\}\nreturn \$default\n]"
  addUserKnob {43 the_frame}
  the_frame "\[\nset the_camera \[string trimright \[value the_cam] .]\nif \{\[exists \$the_camera]\} \{\n    return \[value \$the_camera.frame]\n\} \{ \n    return \[frame]\n\}\n]"
  addUserKnob {4 d_projection_mode l projection M {perspective orthographic uv spherical ""}}
  addUserKnob {7 d_focal l "focal length" R 0 100}
  d_focal 49
  addUserKnob {7 d_haperture l "horiz aperture" R 0 50}
  d_haperture 30
  addUserKnob {7 d_vaperture l "vert aperture" R 0 50}
  d_vaperture 18.672
  addUserKnob {7 d_near l near R 0 10}
  d_near 1
  addUserKnob {7 d_far l far R 0 10000}
  d_far 1000
  addUserKnob {30 d_win_translate l "window translate"}
  addUserKnob {30 d_win_scale l "window scale"}
  d_win_scale {1 1}
  addUserKnob {7 d_winroll l "window roll" R 0 45}
  addUserKnob {7 d_focal_point l "focal distance" R 0 10}
  d_focal_point 2
  addUserKnob {7 d_fstop l fstop R 0 30}
  d_fstop 16
  addUserKnob {26 version l " " t "Updated 5 April 2020" T "<span style=\"color:#666\"><br/><b>DummyCam v1.1</b> - <a href=\"http://www.adrianpueyo.com\" style=\"color:#666;text-decoration: none;\">adrianpueyo.com</a>, 2019-2020</span>"}
 }
 Input {
  inputs 0
  name particles
  xpos 712
  ypos -108
 }
 ParticleBlinkScriptRender {
  inputs 2
  format "256 256 0 0 256 256 1 square_256"
  kernelFile C:/Users/petes/Documents/Nuke_Blinkscripts/Particle_Blink_default_node/ParticleToImageBlink_v004.cpp
  kernelSourceGroup 1
  kernelSource "kernel ParticleRenderKernel : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom,eEdgeClamped> p_position;\n  Image<eRead, eAccessRandom> p_color;\n  Image<eRead, eAccessRandom> p_size;\n  Image<eRead, eAccessRandom> p_id;\n  Image<eWrite, eAccessRandom, eEdgeClamped> output;\n\n  param:\n    float4x4 _worldToScreen;\n    float _size;\n\n  local:\n    int _w, _h;\n    int _numParticles;\n    int sqSize;\n\n  void define() \{\n    defineParam(_worldToScreen, \"_worldToScreen\", float4x4(1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f) );\n    defineParam(_size, \"paSize\", 3.0f);\n  \}\n\n  float4 srcOver( float4 a, float4 b ) \{\n    return (1.0f-a.w)*b + a;\n  \}\n\n  float2 transform( float3 p )\n  \{\n    float4 r = _worldToScreen*float4(p.x, p.y, p.z, 1.0);\n    return float2(r.x, r.y)/r.w;\n  \}\n\n  float smoothstep( float a, float b, float x ) \{\n    float t = clamp((x - a) / (b - a), 0.0, 1.0);\n    return t*t * (3.0f - 2.0f*t);\n  \}\n\n  void init()\n  \{\n    _w = output.bounds.width();\n    _h = output.bounds.height();\n    _numParticles = p_position.bounds.height();\n    sqSize = ceil( sqrt(_numParticles) );\n    \n\n  \n\n\n  \}\n\n  void process(int2 pos) \{\n\n    //sq num\n\n    int id = p_id(0, pos.y);\n    // Position and Size\n    int x = fmod(id, _w);\n    int y = floor(id / _h);\n    float size = p_size(0, pos.y).x;\n    \n    output(x, y)= float4(p_position(0, pos.y), id);\n\n    //int x_id = x + _w*0.5;\n    //output(x_id, y) = float(p_id(0, pos.y));\n    //output(1,1) = sqSize;\n\n\n    // colour\n    //int x_col = x + _w*0.5;\n    //output(x_col, y) = p_color(0, pos.y);\n  \}\n\};\n"
  name ParticleBlinkScriptRender5
  xpos 712
  ypos 8
 }
 Dot {
  name Dot1
  xpos 739
  ypos 410
 }
set N3ed1b000 [stack 0]
 TimeOffset {
  time_offset -1
  time ""
  name TimeOffset2
  xpos 825
  ypos 429
 }
 NoTimeBlur {
  name NoTimeBlur2
  xpos 825
  ypos 453
 }
push $N3ed1b000
 TimeOffset {
  time_offset 1
  time ""
  name TimeOffset1
  xpos 587
  ypos 428
 }
 NoTimeBlur {
  name NoTimeBlur1
  xpos 587
  ypos 452
 }
push $N3ed1b000
 BlinkScript {
  inputs 3
  kernelSourceFile C:/Users/petes/Documents/Nuke_Blinkscripts/Particle_Blink_default_node/Particle_Blink_default_node_v007.cpp
  recompileCount 183
  ProgramGroup 1
  KernelDescription "3 \"blink_render\" iterate pixelWise 6af3434c25489d710a04e75458673901328e19849b68957a2109cb24b036dbf7 4 \"src\" Read Random \"src_prev\" Read Random \"src_next\" Read Random \"dst\" Write Random 21 \"paSize\" Float 1 AABAQA== \"minSize\" Float 1 AACAPw== \"merge_operation\" Int 1 AAAAAA== \"camera_matrix\" Float 16 AACAPwAAAAAAAAAAAAAAAAAAAAAAAIA/AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAPw== \"camera_matrix_prev\" Float 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"camera_matrix_next\" Float 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"haperture\" Float 1 ppvEQQ== \"focal\" Float 1 AADAQQ== \"pixel_aspect\" Float 1 AACAPw== \"cam_near\" Float 1 zczMPQ== \"cam_far\" Float 1 AAB6RA== \"_duplicates_num\" Int 1 AAAAAA== \"duplicate_radius\" Float 1 AAAAPw== \"Steps\" Int 1 CgAAAA== \"spacing\" Float 1 AACAPw== \"clip_z\" Float 1 AAAAAA== \"near\" Float 1 AAAAAA== \"near_falloff\" Float 1 AAAAAA== \"far\" Float 1 AAB6RA== \"far_falloff\" Float 1 AAAAAA== \"falloff_gamma\" Float 1 AACAPw== 21 \"_size\" 1 1 Default \"_minSize\" 1 1 Default \"_merge_operation\" 1 1 Default \"camera_matrix\" 16 1 Default \"camera_matrix_prev\" 16 1 Default \"camera_matrix_next\" 16 1 Default \"haperture\" 1 1 Default \"focal\" 1 1 Default \"pixel_aspect\" 1 1 Default \"cam_near\" 1 1 Default \"cam_far\" 1 1 Default \"_duplicates_num\" 1 1 Default \"_duplicate_radius\" 1 1 Default \"_maxSteps\" 1 1 Default \"spacing\" 1 1 Default \"clip_z\" 1 1 Default \"near\" 1 1 Default \"near_falloff\" 1 1 Default \"far\" 1 1 Default \"far_falloff\" 1 1 Default \"falloff_gamma\" 1 1 Default 16 \"_w\" Int 1 1 AAAAAA== \"_h\" Int 1 1 AAAAAA== \"src_w\" Int 1 1 AAAAAA== \"src_h\" Int 1 1 AAAAAA== \"sqSize\" Int 1 1 AAAAAA== \"image_aspect\" Float 1 1 AAAAAA== \"pixelsPerWorldUnit\" Float 1 1 AAAAAA== \"p\" Float 16 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"t\" Float 16 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"s\" Float 16 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"w2s\" Float 16 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"w2s_prev\" Float 16 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"w2s_next\" Float 16 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"clip_matrix\" Float 16 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"clip_matrix_prev\" Float 16 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"clip_matrix_next\" Float 16 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=="
  kernelSource "\n\nkernel blink_render : ImageComputationKernel<ePixelWise> \{\n  Image<eRead, eAccessRandom, eEdgeClamped> src; \n  Image<eRead, eAccessRandom, eEdgeClamped> src_prev;  \n  Image<eRead, eAccessRandom, eEdgeClamped> src_next;  \n\n  Image<eWrite, eAccessRandom, eEdgeClamped> dst;\n\n// Parameters are made available to the user as knobs.\nparam:\n    float _size;\n    float _minSize;\n    int _merge_operation;\n\n    float4x4 camera_matrix;\n    float4x4 camera_matrix_prev;\n    float4x4 camera_matrix_next;\n    float haperture;\n    float focal;\n    float pixel_aspect;\n    float cam_near;\n    float cam_far;\n\n\n    int _duplicates_num;\n    float _duplicate_radius;\n\n    int _maxSteps;\n    float spacing;\n    float clip_z;\n\n    float near;\n    float near_falloff;\n    float far;\n    float far_falloff;\n    float falloff_gamma;\n\nlocal:\n\n    int _w, _h;\n    int src_w, src_h;\n    int sqSize;\n    float image_aspect;\n    float pixelsPerWorldUnit;\n\n    // projection matrix stuff. This is copying the one nuke provides in nukescripts.snap3d.py\n    float4x4 p;         // projection matrix\n    float4x4 t;         // translate projected points into normalsed pixel coords (from 0,0 to -2,2 instead of -1,-1 to 1,1)\n    float4x4 s;         // scale normalised screen coords to actual pixel coords\n    float4x4 w2s;       // final world to screen matrix. This matches the one provided by this node (ParticleBlinkScriptRender),\n    float4x4 w2s_prev;  // world to screen matrix of previous frame\n    float4x4 w2s_next;  // world to screen matrix of next frame\n\n    float4x4 clip_matrix;\n    float4x4 clip_matrix_prev;\n    float4x4 clip_matrix_next;\n\n\n\n  void define()\{\n\n    defineParam(_size, \"paSize\", 3.0f);\n    defineParam(_minSize, \"minSize\", 1.0f);\n    defineParam(_merge_operation, \"merge_operation\", 0);\n\n    defineParam(camera_matrix, \"camera_matrix\", float4x4(1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f) );\n    defineParam(haperture, \"haperture\", 24.576f);\n    defineParam(focal, \"focal\", 24.0f);\n    defineParam(pixel_aspect, \"pixel_aspect\", 1.0f);\n    defineParam(cam_near, \"cam_near\", 0.1f);\n    defineParam(cam_far, \"cam_far\", 1000.0f);\n\n    defineParam(_duplicates_num, \"_duplicates_num\", 0);\n    defineParam(_duplicate_radius, \"duplicate_radius\", 0.5f);\n\n    defineParam(_maxSteps, \"Steps\", 10);\n    defineParam(spacing, \"spacing\", 1.0f);\n    \n    defineParam(clip_z, \"clip_z\", 0.0f);\n\n    //fade params\n    defineParam(near, \"near\", 0.0f);\n    defineParam(near_falloff, \"near_falloff\", 0.0f);\n    defineParam(far, \"far\", 1000.0f);\n    defineParam(far_falloff, \"far_falloff\", 0.0f);\n    defineParam(falloff_gamma, \"falloff_gamma\", 1.0f);\n  \}\n\n  float4 srcOver( float4 a, float4 b ) \{\n    return (1.0f-a.w)*b + a;\n  \}\n\n  float2 transform( float3 p,float4x4 world_to_screen )\n  \{\n    float4 r = world_to_screen*float4(p.x, p.y, p.z, 1.0);\n    return float2(r.x, r.y)/r.w;\n  \}\nfloat3 transformz( float3 p, float4x4 world_to_screen )\{\n    float4 r = world_to_screen*float4(p.x, p.y, p.z, 1.0);\n    float2 xy = float2(r.x, r.y)/r.w;\n    float depth = r.w;\n    return float3(xy, depth);\n  \}  \n\nfloat4 toClipSpace(float3 P, float4x4 clip_matrix)\{\n    float4 homogeneous_P = float4(P.x, P.y, P.z, 1.0);\n    return clip_matrix*homogeneous_P;\n\}\n\nfloat3 clipToNDC(float4 clip)\{\n    float4 clip_to_screen = s * t * clip;\n    return (float3(clip_to_screen.x/clip_to_screen.w, clip_to_screen.y/clip_to_screen.w, clip_to_screen.w));      // but keep w coordinate for depth. I like it more.. lol.\n\}\n\n// Function to check if a 4D position is within the frustum with padding\nbool isInsideFrustum(float4 position, float padding) \{\n    // Clip space coordinates\n    float x = position.x;\n    float y = position.y;\n    float z = position.z;\n    float w = position.w;\n\n    // Frustum boundaries with padding\n    bool insideX = (x >= -w - padding) && (x <= w + padding);\n    bool insideY = (y >= -w - padding) && (y <= w + padding);\n    bool insideZ = (z >= -w) && (z <= w);\n   //bool insideX = (x >= -padding) && (x <= 2.0 + padding);\n    //bool insideY = (y >= -padding) && (y <= 2.0 + padding);\n    //bool insideZ = (z >= -padding) && (z <= 2.0 + padding);\n\n    // Return true if position is inside the frustum, false otherwise\n    return insideX && insideY && insideZ;\n\}\n\n  float smoothstep( float a, float b, float x ) \{\n    float t = clamp((x - a) / (b - a), 0.0, 1.0);\n    return t*t * (3.0f - 2.0f*t);\n  \}\n    float lerp(float a, float b, float t)\{\n    return a + t * (b-a);\n  \}\n  float2 lerp(float2 a, float2 b, float t) \{\n     return a + t * (b - a);\n  \}\nfloat4x4 projectionMatrix(\n        const float focalLength,\n        const float horizontalAperture,\n        const float nearPlane,\n        const float farPlane)\n\{\n    float farMinusNear = farPlane - nearPlane;\n    return float4x4(\n        2 * focalLength / horizontalAperture, 0, 0, 0,\n        0, 2 * focalLength / horizontalAperture, 0, 0,\n        0, 0, -(farPlane + nearPlane) / farMinusNear, -2 * (farPlane * nearPlane) / farMinusNear,\n        0, 0, -1, 0\n    );\n\}\n\ninline float fract (float x) \{return x-floor(x);\}\ninline float random(float co) \{ return fract(sin(co*(91.3458f)) * 47453.5453f); \}\n\ninline float3 randomv(float3 seed)\{\n  float scramble = random(seed.x + seed.y * seed.z);\n  float3 rand;\n  rand.x = random(seed.x + scramble + 0.14557f + 0.47917f * seed.z)*2-1;\n  rand.y = random(seed.y * 0.214447f + scramble * 47.241f * seed.x)*2-1;\n  rand.z = random(seed.z * scramble + 3.147855f + 0.2114f * seed.y)*2-1;\n  return normalize(rand);\n\}\n\ninline float3 randomv2(float seed)\{\n    //float scramble = random(seed + seed * seed);\n    float3 rand;\n    rand.x = random(seed + 0.215568f)*2.0-1.0;\n    rand.y = random(seed + 2.112408f)*2.0-1.0;\n    rand.z = random(seed + 68.13384f)*2.0-1.0;\n    return rand;\n\}\n\n\nint fastfloor( const float x ) \{ return x > 0 ? (int) x : (int) x - 1; \}\ninline float raw_noise_4d( const float x, const float y, const float z, const float w ) \{\nint simplex\[64]\[4] = \{\n    \{0,1,2,3\},\{0,1,3,2\},\{0,0,0,0\},\{0,2,3,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,2,3,0\},\n    \{0,2,1,3\},\{0,0,0,0\},\{0,3,1,2\},\{0,3,2,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,3,2,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{1,2,0,3\},\{0,0,0,0\},\{1,3,0,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,3,0,1\},\{2,3,1,0\},\n    \{1,0,2,3\},\{1,0,3,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,0,3,1\},\{0,0,0,0\},\{2,1,3,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{2,0,1,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,0,1,2\},\{3,0,2,1\},\{0,0,0,0\},\{3,1,2,0\},\n    \{2,1,0,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,1,0,2\},\{0,0,0,0\},\{3,2,0,1\},\{3,2,1,0\}\n\};\n    int perm\[512] = \{\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,\n\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n    \};\n   int grad4\[32]\[4]= \{\n    \{0,1,1,1\},  \{0,1,1,-1\},  \{0,1,-1,1\},  \{0,1,-1,-1\},\n    \{0,-1,1,1\}, \{0,-1,1,-1\}, \{0,-1,-1,1\}, \{0,-1,-1,-1\},\n    \{1,0,1,1\},  \{1,0,1,-1\},  \{1,0,-1,1\},  \{1,0,-1,-1\},\n    \{-1,0,1,1\}, \{-1,0,1,-1\}, \{-1,0,-1,1\}, \{-1,0,-1,-1\},\n    \{1,1,0,1\},  \{1,1,0,-1\},  \{1,-1,0,1\},  \{1,-1,0,-1\},\n    \{-1,1,0,1\}, \{-1,1,0,-1\}, \{-1,-1,0,1\}, \{-1,-1,0,-1\},\n    \{1,1,1,0\},  \{1,1,-1,0\},  \{1,-1,1,0\},  \{1,-1,-1,0\},\n    \{-1,1,1,0\}, \{-1,1,-1,0\}, \{-1,-1,1,0\}, \{-1,-1,-1,0\}\n   \};\n    float F4 = (sqrt(5.0f)-1.0)/4.0;\n    float G4 = (5.0-sqrt(5.0f))/20.0;\n    float n0, n1, n2, n3, n4;\n    float s = (x + y + z + w) * F4;\n    int i = fastfloor(x + s);\n    int j = fastfloor(y + s);\n    int k = fastfloor(z + s);\n    int l = fastfloor(w + s);\n    float t = (i + j + k + l) * G4;\n    float X0 = i - t;\n    float Y0 = j - t;\n    float Z0 = k - t;\n    float W0 = l - t;\n\n    float x0 = x - X0;\n    float y0 = y - Y0;\n    float z0 = z - Z0;\n    float w0 = w - W0;\n    int c1 = (x0 > y0) ? 32 : 0;\n    int c2 = (x0 > z0) ? 16 : 0;\n    int c3 = (y0 > z0) ? 8 : 0;\n    int c4 = (x0 > w0) ? 4 : 0;\n    int c5 = (y0 > w0) ? 2 : 0;\n    int c6 = (z0 > w0) ? 1 : 0;\n    int c = c1 + c2 + c3 + c4 + c5 + c6;\n\n    int i1, j1, k1, l1;\n    int i2, j2, k2, l2;\n    int i3, j3, k3, l3;\n    i1 = simplex\[c]\[0]>=3 ? 1 : 0;\n    j1 = simplex\[c]\[1]>=3 ? 1 : 0;\n    k1 = simplex\[c]\[2]>=3 ? 1 : 0;\n    l1 = simplex\[c]\[3]>=3 ? 1 : 0;\n    i2 = simplex\[c]\[0]>=2 ? 1 : 0;\n    j2 = simplex\[c]\[1]>=2 ? 1 : 0;\n    k2 = simplex\[c]\[2]>=2 ? 1 : 0;\n    l2 = simplex\[c]\[3]>=2 ? 1 : 0;\n    i3 = simplex\[c]\[0]>=1 ? 1 : 0;\n    j3 = simplex\[c]\[1]>=1 ? 1 : 0;\n    k3 = simplex\[c]\[2]>=1 ? 1 : 0;\n    l3 = simplex\[c]\[3]>=1 ? 1 : 0;\n    float x1 = x0 - i1 + G4;\n    float y1 = y0 - j1 + G4;\n    float z1 = z0 - k1 + G4;\n    float w1 = w0 - l1 + G4;\n    float x2 = x0 - i2 + 2.0*G4;\n    float y2 = y0 - j2 + 2.0*G4;\n    float z2 = z0 - k2 + 2.0*G4;\n    float w2 = w0 - l2 + 2.0*G4;\n    float x3 = x0 - i3 + 3.0*G4;\n    float y3 = y0 - j3 + 3.0*G4;\n    float z3 = z0 - k3 + 3.0*G4;\n    float w3 = w0 - l3 + 3.0*G4;\n    float x4 = x0 - 1.0 + 4.0*G4;\n    float y4 = y0 - 1.0 + 4.0*G4;\n    float z4 = z0 - 1.0 + 4.0*G4;\n    float w4 = w0 - 1.0 + 4.0*G4;\n    int ii = i & 255;\n    int jj = j & 255;\n    int kk = k & 255;\n    int ll = l & 255;\n    int gi0 = perm\[ii+perm\[jj+perm\[kk+perm\[ll]]]] % 32;\n    int gi1 = perm\[ii+i1+perm\[jj+j1+perm\[kk+k1+perm\[ll+l1]]]] % 32;\n    int gi2 = perm\[ii+i2+perm\[jj+j2+perm\[kk+k2+perm\[ll+l2]]]] % 32;\n    int gi3 = perm\[ii+i3+perm\[jj+j3+perm\[kk+k3+perm\[ll+l3]]]] % 32;\n    int gi4 = perm\[ii+1+perm\[jj+1+perm\[kk+1+perm\[ll+1]]]] % 32;\n    float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;\n    if(t0<0) n0 = 0.0;\n    else \{\n        t0 *= t0;\n        n0 = t0 * t0 * dot(float4(grad4\[gi0]\[0],grad4\[gi0]\[2],grad4\[gi0]\[3],grad4\[gi0]\[3]), float4(x0, y0, z0, w0));\n    \}\n    float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;\n    if(t1<0) n1 = 0.0;\n    else \{\n        t1 *= t1;\n        n1 = t1 * t1 * dot(float4(grad4\[gi1]\[0],grad4\[gi1]\[2],grad4\[gi1]\[3],grad4\[gi1]\[3]), float4(x1, y1, z1, w1));\n    \}\n    float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;\n    if(t2<0) n2 = 0.0;\n    else \{\n        t2 *= t2;\n        n2 = t2 * t2 * dot(float4(grad4\[gi2]\[0],grad4\[gi2]\[2],grad4\[gi2]\[3],grad4\[gi2]\[3]), float4(x2, y2, z2, w2));\n    \}\n    float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;\n    if(t3<0) n3 = 0.0;\n    else \{\n        t3 *= t3;\n        n3 = t3 * t3 * dot(float4(grad4\[gi3]\[0],grad4\[gi3]\[2],grad4\[gi3]\[3],grad4\[gi3]\[3]), float4(x3, y3, z3, w3));\n    \}\n    float t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;\n    if(t4<0) n4 = 0.0;\n    else \{\n        t4 *= t4;\n        n4 = t4 * t4 * dot(float4(grad4\[gi4]\[0],grad4\[gi4]\[2],grad4\[gi4]\[3],grad4\[gi4]\[3]), float4(x4, y4, z4, w4));\n    \}\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n\}\n\ninline float3 Noise3D(float3 P, float w)\{\n    float x = raw_noise_4d(P.x, P.y, P.z, w);\n    float y = raw_noise_4d(P.x, P.y, P.z, w+20.0);\n    float z = raw_noise_4d(P.x, P.y, P.z, w+40.0);\n    return float3(x,y,z);\n\}\n\n  void init() \{\n    _w = dst.bounds.width();\n    _h = dst.bounds.height();\n    src_w = src.bounds.width();\n    src_h = src.bounds.height();\n    sqSize = src_w / 2;\n\n    image_aspect = float(_h) / float(_w);\n    pixelsPerWorldUnit = (_w*0.5) / haperture;\n\n    // camera projection matrix\n    p = projectionMatrix(focal, haperture, cam_near, cam_far);\n\n    // Matrix to scale normalised pixel coords into actual pixel coords.\n    float x_scale = float(_w) * 0.5;\n    float y_scale = x_scale *pixel_aspect;\n    s.setIdentity();\n    s.scale(float4(x_scale, y_scale, 1.0f,1.0f));\n\n    // Matrix to translate the projected points into normalised pixel coords\n    t.setIdentity();\n    t.translate(float4(1.0, 1.0 - (1.0 - image_aspect / pixel_aspect), 0.0f, 1.0f));\n\n    // view matrix is inverted camera world matrix\n    float4x4 view =  camera_matrix.invert();\n    float4x4 view_prev =  camera_matrix_prev.invert();\n    float4x4 view_next =  camera_matrix_next.invert();\n    \n    clip_matrix = p * view;\n    clip_matrix_prev = p * view_prev;\n    clip_matrix_next = p * view_next;\n\n    // world to screen matrix is the concatenation of above matrices, from right to left.\n    // TO DO: maybe add screen scale/roll all that crap that the snap3d projection matrix provides. Could be useful for overscan..?\n    w2s = s * t * p * view;\n    w2s_prev = s * t * p * view_prev;\n    w2s_next = s * t * p * view_next;\n  \}\n  /*\n  void renderPoint( float2 xy, float4 pcolor, float pointSize )\n  \{\n    float sizeSquared = pointSize*pointSize;\n    float2 f = xy-floor(xy);\n    float2 g = float2(1.0f) - f;\n    //xy = floor(xy);\n    int size = ceil(pointSize);\n    int minX = max(0, int(xy.x)-size);\n    int maxX = min(_w-1, int(xy.x)+size);\n    int minY = max(0, int(xy.y)-size);\n    int maxY = min(_h-1, int(xy.y)+size);\n    for ( int y = minY; y <= maxY; y++ ) \{\n      for ( int x = minX ; x <= maxX; x++ ) \{\n        float2 p = float2(x, y);\n        float2 d = p-xy;\n        float r2 = dot(d, d);\n        if ( r2 < sizeSquared ) \{\n         float t = 1.0f-smoothstep(0, sizeSquared, r2);\n          dst(p.x, p.y) += pcolor*t;\n        \}\n      \}\n    \}\n  \}*/\n\n  void renderPoint( float2 xy, float4 pcolor, float pointSize, float falloff )\{\n\n    float sizeSquared = pointSize*pointSize;\n    float2 f = xy-floor(xy);                            //fractional part of screen coordinate?\n    float2 g = float2(1.0f) - f;                        // complement/invert of fractional part\n    //xy = floor(xy);\n    int size = ceil(pointSize);\n    int minX = max(0, int(xy.x)-size);                  // min x coord is clamped to image x=0\n    int maxX = min(_w-1, int(xy.x)+size);               // max x coord is clamped to max image x coord\n    int minY = max(0, int(xy.y)-size);                  // etc for y coord\n    int maxY = min(_h-1, int(xy.y)+size);\n    // for loop that runs over the expected size of the point to be rendered.\n    for ( int y = minY; y <= maxY; y++ ) \{              // starting at min y until max y\n      for ( int x = minX ; x <= maxX; x++ ) \{           // starting at min x until max x\n        float2 p = float2(x, y);                        // current position in the iteration space\n        float2 d = p-xy;                                // vector from center point to the current pixel\n        float r2 = dot(d, d);                           // squared distance to from p to xy\n        // work with squares, ie squared distance and squared radius because it's faster to calculate.\n        if ( r2 < sizeSquared ) \{                       // if radius squared is smaller than size squared\n         float t = 1.0f-smoothstep(0, sizeSquared, r2);\n        t *= falloff;\n          if (_merge_operation == 0) \{\n            dst(p.x, p.y) += pcolor*t;\n          \}\n          if (_merge_operation == 1)\{\n          float4 colourToAdd = pcolor * t;\n          float4 existingColour = dst(p.x,p.y);\n          dst(p.x, p.y) = srcOver(colourToAdd, existingColour);\n          \}\n                           // after we calculate the pixels distance, and smooth it with smoothstep\n                                                        // we write it to the output buffer with a simple plus.\n        \}\n      \}\n    \}\n  \}\n\n    float2 bezier(float2 p0, float2 p1, float2 p2, float t) \{\n    float u = 1.0f - t;\n    float tt = t * t;\n    float uu = u * u;\n\n    float2 p = uu * p0;\n    p += 2 * u * t * p1; \n    p += tt * p2;\n\n    return p;\n\}\n\n  float minMaxSmooth(float n,float ns,float f,float fs,float v)\{\n      // input variables are near, near soft, far, far soft and value\n      float output = 0.0;\n      float near = min(n, f);\n      float near_soft = max(ns, 0.0);\n      float far = max(n, f);\n      float far_soft = max(fs, 0.0);\n\n      float near_soft_absolute = near-near_soft;\n      float far_soft_absolute = far+far_soft;\n\n      if (v <= near)\{\n        output = smoothstep(near_soft_absolute,near,v);\n        \}\n      else\{\n        output = 1-smoothstep(far,far_soft_absolute,v);\n        \}\n      return output;\n  \}\n\n\n    float screenSpaceSize(float focal, float pixelsPerWorldUnit, float p_size, float distance)\{\n        float particleSizeOnImagePlane = (focal * p_size) / distance;\n        float particleSizeInPixels = (particleSizeOnImagePlane * pixelsPerWorldUnit);\n    return particleSizeInPixels;\n  \}  \n  // The process() function runs over all pixel positions of the output image.\n\n  void process(int2 pos) \{\n\n    \n    if(pos.x < src_w && pos.y < src_h)\{                     // don't bother if the pixel position is outside of the src bounds\n    \n    //int id_x = fmod(pos.y, sqSize) + 256;\n    //int id_y = floor(pos.y / sqSize);\n\n    int id = int(src(pos.x, pos.y).w);\n    if(id != 0)\{                                             // also don't bother if the id=0, ie, there's no particle\n    int id_prev = int(src_prev(pos.x, pos.y).w);\n    int id_next = int(src_next(pos.x, pos.y).w);\n    \n\n    float4 read_pos_size = src(pos.x, pos.y);\n    float4 read_pos_size_prev = src_prev(pos.x, pos.y);    \n    float4 read_pos_size_next = src_next(pos.x, pos.y);   \n    \n    //int colour_pixel_x_offset = src_w * 0.5;\n    //float4 read_col = src(colour_pixel_x_offset + pos.x, pos.y);\n\n    float3 P = float3(read_pos_size.x, read_pos_size.y, read_pos_size.z);\n    float3 P_prev = float3(read_pos_size_prev.x, read_pos_size_prev.y, read_pos_size_prev.z);\n    float3 P_next = float3(read_pos_size_next.x, read_pos_size_next.y, read_pos_size_next.z);\n\n    if (id_prev != id)\{                                      // if the particle is new, ie, it didn't exist last frame.\n        P_prev = P;\n    \}\n    if (id_next != id)\{                                     // if the particle is about to die, ie, won't exist next frame\n        P_next = P;\n    \}\n\n\n\n\n    float dist = transformz(P, w2s).z;\n\n    if (dist>0.0f)\{\n\n        for (int pt = 0; pt <= _duplicates_num; pt++)\{            // duplicate points\n\n        if (pt !=0)\{\n            P += randomv2(float(pt) + float(id)*0.02)*_duplicate_radius;\n            P_prev += randomv2(float(pt) + float(id)*0.02)*_duplicate_radius;\n            P_next += randomv2(float(pt) + float(id)*0.02)*_duplicate_radius;\n        \}\n\n\n        float4 clip = toClipSpace(P, clip_matrix);\n        float4 clip_prev = toClipSpace(P_prev, clip_matrix_prev);\n        float4 clip_next = toClipSpace(P_next, clip_matrix_next);\n        //if (!isInsideFrustum(clip,0) && !isInsideFrustum(clip_prev,0) && !isInsideFrustum(clip_next,0))\{\n        if (!isInsideFrustum(clip,clip_z) && !isInsideFrustum(clip_prev,clip_z) && !isInsideFrustum(clip_next,clip_z))\{\n            break;\n        \}\n        float3 ndc = clipToNDC(clip);\n        float3 ndc_prev = clipToNDC(clip_prev);\n        float3 ndc_next =  clipToNDC(clip_next);\n\n        /*\n        float3 ndc = transformz(P, w2s);\n        float3 ndc_prev = transformz(P_prev, w2s_prev);\n        float3 ndc_next = transformz(P_next, w2s_next);\n        */\n\n\n        float2 xy = float2(ndc.x, ndc.y);\n        float2 xy_prev = float2(ndc_prev.x, ndc_prev.y);\n        float2 xy_next = float2(ndc_next.x, ndc_next.y);\n\n\n        float size = max(_minSize,min(25.0f, screenSpaceSize(focal, pixelsPerWorldUnit, _size, ndc.z)));\n        float size_prev = min(50.0f, screenSpaceSize(focal, pixelsPerWorldUnit, _size, ndc_prev.z));\n        float size_next = min(50.0f, screenSpaceSize(focal, pixelsPerWorldUnit, _size, ndc_next.z));\n\n        float4 col = float4(1.0, 1.0, 1.0, 1.0);\n        float4 red = float4(1.f, 0.f, 0.f, 1.f);\n        float4 green = float4(0.f, 1.f, 0.f, 1.f);\n        float4 blue = float4(0.f, 0.f, 1.f, 1.f);\n        /*\n        float4 clipCheck;\n        if (isInsideFrustum(clip, clip_z))\{\n            clipCheck = float4(0.0, 1.0, 0.0, 1.0);\n        \}\n        else\{\n            clipCheck = float4(1.0, 0.0, 0.0, 1.0);\n        \}\n        */\n\n        float blur_length = length(xy - xy_prev) + length(xy - xy_next);\n        int steps = max(0 , min(_maxSteps, int(ceil(blur_length/max(2.0f, min(size_prev, size_next))*2.0/spacing))));\n\n\n        float depth_fade = minMaxSmooth(near, near_falloff, far, far_falloff, ndc.z);\n        depth_fade = pow(depth_fade, falloff_gamma);\n        float4 render_col = float4(1.0,1.0,1.0,1.0)/float(steps);\n        //int steps = _maxSteps;\n\n        /*\n        for (int step = 0; step < steps; step++)\{\n            float step_position = float(step)/float(steps);\n            float2 xy_render = lerp(xy_prev, xy, step_position);\n            renderPoint(xy_render, col/float(steps), 2.0);\n            \}*/\n        \n        for (int step = 0; step <= steps; step++)\{\n            float step_position = float(step)/float(steps);\n            //float shutter_step = lerp(0.375, 0.625, step_position);\n            float shutter_step = lerp(0.0, 1.0, step_position);\n\n            float2 xy_render = bezier(xy_prev, xy, xy_next, shutter_step);\n            renderPoint(xy_render,render_col , size, depth_fade );\n        \}\n        //renderPoint(xy, green, size);\n        //renderPoint(xy_prev, red, size);\n        //renderPoint(xy_next, blue, size);\n\n\n\n        \n        \}\n    \}\n  \}\n  \}\n\n\n\n    \}\n  \};"
  rebuild ""
  blink_render_paSize {{parent.size_mult}}
  blink_render_minSize {{parent.min_size}}
  blink_render_merge_operation 1
  blink_render_camera_matrix {
      {{parent.DummyCam.world_matrix} {parent.DummyCam.world_matrix} {parent.DummyCam.world_matrix} {parent.DummyCam.world_matrix}}
      {{parent.DummyCam.world_matrix} {parent.DummyCam.world_matrix} {parent.DummyCam.world_matrix} {parent.DummyCam.world_matrix}}
      {{parent.DummyCam.world_matrix} {parent.DummyCam.world_matrix} {parent.DummyCam.world_matrix} {parent.DummyCam.world_matrix}}
      {{parent.DummyCam.world_matrix} {parent.DummyCam.world_matrix} {parent.DummyCam.world_matrix} {parent.DummyCam.world_matrix}}
    }
  blink_render_camera_matrix_prev {
      {{parent.DummyCam.world_matrix(frame-1)} {parent.DummyCam.world_matrix(frame-1)} {parent.DummyCam.world_matrix(frame-1)} {parent.DummyCam.world_matrix(frame-1)}}
      {{parent.DummyCam.world_matrix(frame-1)} {parent.DummyCam.world_matrix(frame-1)} {parent.DummyCam.world_matrix(frame-1)} {parent.DummyCam.world_matrix(frame-1)}}
      {{parent.DummyCam.world_matrix(frame-1)} {parent.DummyCam.world_matrix(frame-1)} {parent.DummyCam.world_matrix(frame-1)} {parent.DummyCam.world_matrix(frame-1)}}
      {{parent.DummyCam.world_matrix(frame-1)} {parent.DummyCam.world_matrix(frame-1)} {parent.DummyCam.world_matrix(frame-1)} {parent.DummyCam.world_matrix(frame-1)}}
    }
  blink_render_camera_matrix_next {
      {{parent.DummyCam.world_matrix(frame+1)} {parent.DummyCam.world_matrix(frame+1)} {parent.DummyCam.world_matrix(frame+1)} {parent.DummyCam.world_matrix(frame+1)}}
      {{parent.DummyCam.world_matrix(frame+1)} {parent.DummyCam.world_matrix(frame+1)} {parent.DummyCam.world_matrix(frame+1)} {parent.DummyCam.world_matrix(frame+1)}}
      {{parent.DummyCam.world_matrix(frame+1)} {parent.DummyCam.world_matrix(frame+1)} {parent.DummyCam.world_matrix(frame+1)} {parent.DummyCam.world_matrix(frame+1)}}
      {{parent.DummyCam.world_matrix(frame+1)} {parent.DummyCam.world_matrix(frame+1)} {parent.DummyCam.world_matrix(frame+1)} {parent.DummyCam.world_matrix(frame+1)}}
    }
  blink_render_haperture {{DummyCam.haperture}}
  blink_render_focal {{DummyCam.focal}}
  blink_render_cam_near {{DummyCam.near}}
  blink_render_cam_far {{DummyCam.far}}
  blink_render__duplicates_num {{parent.duplicates}}
  blink_render_duplicate_radius {{parent.duplicate_radius}}
  blink_render_Steps {{parent.max_steps}}
  blink_render_spacing {{parent.spacing}}
  blink_render_near {{parent.fade_near}}
  blink_render_near_falloff {{parent.fade_near_falloff}}
  blink_render_far {{parent.fade_far}}
  blink_render_far_falloff {{parent.fade_far_falloff}}
  blink_render_falloff_gamma {{1/parent.falloff_gamma}}
  specifiedFormat true
  rebuild_finalise ""
  name BlinkScript3
  selected true
  xpos 705
  ypos 595
 }
 Output {
  name Output1
  xpos 705
  ypos 750
 }
end_group
