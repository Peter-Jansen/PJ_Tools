Group {
 name TaupoRender
 tile_color 0x9c0000ff
 selected true
 addUserKnob {20 User l "Taupo Render"}
 addUserKnob {26 taupo_render_title l "" t "Because Krakatoa used to be a sweet particle renderer, and Taupo is a supervolcano in New Zealand. " +STARTLINE T "<font size=\"+5\"> Taupo Render"}
 addUserKnob {26 about l "" +STARTLINE T "<font style=\"color: #666666;\">v0.20 | <a href=\"https://www.linkedin.com/in/petejans/\" style=\"color: #6786b8;\">Peter Jansen</a>"}
 addUserKnob {26 ""}
 addUserKnob {41 format_1 l "output format" T Reformat1.format}
 addUserKnob {4 merge_operation l "merge mode" M {additive over}}
 addUserKnob {26 size_text l <b>Size}
 addUserKnob {4 size_mode l "size mode" M {2D 3D ""}}
 size_mode 3D
 addUserKnob {7 size_mult l "size multiplier" R 0 10}
 size_mult 1
 addUserKnob {7 min_size l "min size" R 0 2}
 addUserKnob {26 text l <b>Replicator}
 addUserKnob {3 duplicates}
 addUserKnob {7 duplicate_radius l radius}
 duplicate_radius 1
 addUserKnob {26 dist_fade_text l "<b>Fade by Distance"}
 addUserKnob {41 near T ParticleBlinkScriptRender1.near}
 addUserKnob {41 near_falloff l "near falloff" T ParticleBlinkScriptRender1.near_falloff}
 addUserKnob {41 far T ParticleBlinkScriptRender1.far}
 addUserKnob {41 far_falloff l "far falloff" T ParticleBlinkScriptRender1.far_falloff}
 addUserKnob {7 falloff_gamma l gamma}
 falloff_gamma 1
 addUserKnob {26 mb_text l "<b>Motion Blur"}
 addUserKnob {7 shutter}
 shutter 0.5
 addUserKnob {4 shutter_type l "shutter offset" M {start centered end ""}}
 shutter_type centered
 addUserKnob {3 max_steps l "max steps"}
 max_steps 64
 addUserKnob {7 spacing R 0 10}
 spacing 1
}
 Input {
  inputs 0
  name cam
  xpos 359
  ypos 221
  number 1
 }
 Camera {
  projection_mode {{"\[expression \[value the_cam]projection_mode(\[value the_frame])]"}}
  focal {{"\[expression \[value the_cam]focal(\[value the_frame])]"}}
  haperture {{"\[expression \[value the_cam]haperture(\[value the_frame])]"}}
  vaperture {{"\[expression \[value the_cam]vaperture(\[value the_frame])]"}}
  near {{"\[expression \[value the_cam]near(\[value the_frame])]"}}
  far {{"\[expression \[value the_cam]far(\[value the_frame])]"}}
  win_translate {{"\[expression \[value the_cam]win_translate.u(\[value the_frame])]"} {"\[expression \[value the_cam]win_translate.v(\[value the_frame])]"}}
  win_scale {{"\[expression \[value the_cam]win_scale.u(\[value the_frame])]"} {"\[expression \[value the_cam]win_scale.v(\[value the_frame])]"}}
  winroll {{"\[expression \[value the_cam]winroll(\[value the_frame])]"}}
  focal_point {{"\[expression \[value the_cam]focal_point(\[value the_frame])]"}}
  fstop {{"\[expression \[value the_cam]fstop(\[value the_frame])]"}}
  name DummyCam
  help "DummyCam by Adrian Pueyo\n\nCamera that apart from the matrices also grabs all the \"Projection\" values from the upstream camera that it's connected to. Turns into a default Camera if no Camera connected. Can also be used inside of groups and gizmos, as many levels deep as you want :D All using live and super fast TCL.\n\nUpdated v1.1: Now grabs the correct frame too (thanks Erwan Leroy for the idea).\n\nadrianpueyo.com, 2019-2020"
  onCreate "n = nuke.thisNode()\nfor k in \[\"projection_mode\",\"focal\",\"haperture\",\"vaperture\",\"near\",\"far\",\"win_translate\",\"win_scale\",\"winroll\",\"focal_point\",\"fstop\"]:\n    n\[k].setFlag(0x0000000010000000)"
  label "\[value \[value the_cam]name]"
  xpos 369
  ypos 350
  addUserKnob {20 DummyCam l Defaults}
  addUserKnob {43 the_cam}
  the_cam "\[\n#DummyCam v1.1. Updated 5 April 2020.\nset starting_point \"this.input0\"\nset default \"this.d_\"\n\n# If cam has no inputs, return the default.\nif \{\[exists \$starting_point]\} \{\n    set x \[node \$starting_point]\n\} \{ \n    return \$default\n\}\n\nset finished 0\nwhile \{\$finished != 1\} \{\n\n    # First look for a Cam or Input or topnode.\n    while \{\[class \$x] != \"Camera2\" && \[class \$x] != \"Camera\" && \[class \$x] != \"Camera3\" && \[class \$x] != \"Input\" && \$x != \[topnode \$x]\} \{\n        set x \[node \$x.input0]\n    \}\n\n    # Then, check if node is a cam (and return), and otherwise, if it's an input, see if the parent exists and move to it.\n    if \{\[class \$x]==\"Camera2\"||\[class \$x]==\"Camera3\"||\[class \$x]==\"Camera\"\} \{\n        set x \[append x \".\"]\n        return \$x\n    \} \{ \n        if \{ \[class \$x]==\"Input\" \} \{ \n            set inp \"\$x.parent.input\"\n            set inputNum \[value \$x.number]\n            set inp \[append inp \$inputNum]\n            if \{ \[exists \$inp] \} \{\n                set x \[node \$inp]\n            \} \{ \n                set finished 1\n            \}\n        \} \{ \n            set finished 1\n        \}\n    \}\n\}\nreturn \$default\n]"
  addUserKnob {43 the_frame}
  the_frame "\[\nset the_camera \[string trimright \[value the_cam] .]\nif \{\[exists \$the_camera]\} \{\n    return \[value \$the_camera.frame]\n\} \{ \n    return \[frame]\n\}\n]"
  addUserKnob {4 d_projection_mode l projection M {perspective orthographic uv spherical ""}}
  addUserKnob {7 d_focal l "focal length" R 0 100}
  d_focal 49
  addUserKnob {7 d_haperture l "horiz aperture" R 0 50}
  d_haperture 30
  addUserKnob {7 d_vaperture l "vert aperture" R 0 50}
  d_vaperture 18.672
  addUserKnob {7 d_near l near R 0 10}
  d_near 4.85
  addUserKnob {7 d_far l far R 0 10000}
  d_far 10000
  addUserKnob {30 d_win_translate l "window translate"}
  addUserKnob {30 d_win_scale l "window scale"}
  d_win_scale {1 1}
  addUserKnob {7 d_winroll l "window roll" R 0 45}
  addUserKnob {7 d_focal_point l "focal distance" R 0 10}
  d_focal_point 2
  addUserKnob {7 d_fstop l fstop R 0 30}
  d_fstop 16
  addUserKnob {26 version l " " t "Updated 5 April 2020" T "<span style=\"color:#666\"><br/><b>DummyCam v1.1</b> - <a href=\"http://www.adrianpueyo.com\" style=\"color:#666;text-decoration: none;\">adrianpueyo.com</a>, 2019-2020</span>"}
 }
set N3abec400 [stack 0]
 Constant {
  inputs 0
  channels rgb
  format "512 512 0 0 512 512 1 square_512"
  name Constant1
  xpos 197
  ypos 410
 }
 Reformat {
  name Reformat1
  xpos 197
  ypos 482
 }
 MotionBlur3D {
  inputs 2
  shutteroffset centred
  name MotionBlur3D1
  xpos 359
  ypos 482
 }
 Shuffle2 {
  fromInput1 {{0} B}
  in1 forward
  fromInput2 {{0} B}
  mappings "4 forward.u 0 0 rgba.red 0 0 forward.v 0 1 rgba.green 0 1 black -1 -1 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle1
  label "\[value in1] -> \[value out1]"
  xpos 359
  ypos 585
 }
push $N3abec400
 Input {
  inputs 0
  name particles
  xpos 568
  ypos 222
 }
 ParticleBlinkScriptRender {
  inputs 3
  format {{{Reformat1.format}}}
  kernelFile C:/Users/petes/Documents/Nuke_Blinkscripts/particle_blinkscript_render/particle_blinkscript_render_v020.cpp
  kernelSourceGroup 1
  kernelSource "inline float fract (float x) \{return x-floor(x);\}\ninline float random(float co) \{ return fract(sin(co*(91.3458f)) * 47453.5453f); \}\n\ninline float3 randomv(float3 seed)\{\n  float scramble = random(seed.x + seed.y * seed.z);\n  float3 rand;\n  rand.x = random(seed.x + scramble + 0.14557f + 0.47917f * seed.z)*2-1;\n  rand.y = random(seed.y * 0.214447f + scramble * 47.241f * seed.x)*2-1;\n  rand.z = random(seed.z * scramble + 3.147855f + 0.2114f * seed.y)*2-1;\n  return normalize(rand);\n\}\n\ninline float3 randomv2(float seed)\{\n    //float scramble = random(seed + seed * seed);\n    float3 rand;\n    rand.x = random(seed + 0.215568f)*2.0-1.0;\n    rand.y = random(seed + 2.112408f)*2.0-1.0;\n    rand.z = random(seed + 68.13384f)*2.0-1.0;\n    return rand;\n\}\n\n\nint fastfloor( const float x ) \{ return x > 0 ? (int) x : (int) x - 1; \}\ninline float raw_noise_4d( const float x, const float y, const float z, const float w ) \n\{\nint simplex\[64]\[4] = \{\n    \{0,1,2,3\},\{0,1,3,2\},\{0,0,0,0\},\{0,2,3,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,2,3,0\},\n    \{0,2,1,3\},\{0,0,0,0\},\{0,3,1,2\},\{0,3,2,1\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{1,3,2,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{1,2,0,3\},\{0,0,0,0\},\{1,3,0,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,3,0,1\},\{2,3,1,0\},\n    \{1,0,2,3\},\{1,0,3,2\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{2,0,3,1\},\{0,0,0,0\},\{2,1,3,0\},\n    \{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\n    \{2,0,1,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,0,1,2\},\{3,0,2,1\},\{0,0,0,0\},\{3,1,2,0\},\n    \{2,1,0,3\},\{0,0,0,0\},\{0,0,0,0\},\{0,0,0,0\},\{3,1,0,2\},\{0,0,0,0\},\{3,2,0,1\},\{3,2,1,0\}\n\};\n    int perm\[512] = \{\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,\n\n        151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,\n        8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,\n        35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,\n        134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,\n        55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208, 89,\n        18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,\n        250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,\n        189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,\n        172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,\n        228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,\n        107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,\n        138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n    \};\n   int grad4\[32]\[4]= \{\n    \{0,1,1,1\},  \{0,1,1,-1\},  \{0,1,-1,1\},  \{0,1,-1,-1\},\n    \{0,-1,1,1\}, \{0,-1,1,-1\}, \{0,-1,-1,1\}, \{0,-1,-1,-1\},\n    \{1,0,1,1\},  \{1,0,1,-1\},  \{1,0,-1,1\},  \{1,0,-1,-1\},\n    \{-1,0,1,1\}, \{-1,0,1,-1\}, \{-1,0,-1,1\}, \{-1,0,-1,-1\},\n    \{1,1,0,1\},  \{1,1,0,-1\},  \{1,-1,0,1\},  \{1,-1,0,-1\},\n    \{-1,1,0,1\}, \{-1,1,0,-1\}, \{-1,-1,0,1\}, \{-1,-1,0,-1\},\n    \{1,1,1,0\},  \{1,1,-1,0\},  \{1,-1,1,0\},  \{1,-1,-1,0\},\n    \{-1,1,1,0\}, \{-1,1,-1,0\}, \{-1,-1,1,0\}, \{-1,-1,-1,0\}\n   \};\n    float F4 = (sqrt(5.0f)-1.0)/4.0;\n    float G4 = (5.0-sqrt(5.0f))/20.0;\n    float n0, n1, n2, n3, n4;\n    float s = (x + y + z + w) * F4;\n    int i = fastfloor(x + s);\n    int j = fastfloor(y + s);\n    int k = fastfloor(z + s);\n    int l = fastfloor(w + s);\n    float t = (i + j + k + l) * G4;\n    float X0 = i - t;\n    float Y0 = j - t;\n    float Z0 = k - t;\n    float W0 = l - t;\n\n    float x0 = x - X0;\n    float y0 = y - Y0;\n    float z0 = z - Z0;\n    float w0 = w - W0;\n    int c1 = (x0 > y0) ? 32 : 0;\n    int c2 = (x0 > z0) ? 16 : 0;\n    int c3 = (y0 > z0) ? 8 : 0;\n    int c4 = (x0 > w0) ? 4 : 0;\n    int c5 = (y0 > w0) ? 2 : 0;\n    int c6 = (z0 > w0) ? 1 : 0;\n    int c = c1 + c2 + c3 + c4 + c5 + c6;\n\n    int i1, j1, k1, l1;\n    int i2, j2, k2, l2;\n    int i3, j3, k3, l3;\n    i1 = simplex\[c]\[0]>=3 ? 1 : 0;\n    j1 = simplex\[c]\[1]>=3 ? 1 : 0;\n    k1 = simplex\[c]\[2]>=3 ? 1 : 0;\n    l1 = simplex\[c]\[3]>=3 ? 1 : 0;\n    i2 = simplex\[c]\[0]>=2 ? 1 : 0;\n    j2 = simplex\[c]\[1]>=2 ? 1 : 0;\n    k2 = simplex\[c]\[2]>=2 ? 1 : 0;\n    l2 = simplex\[c]\[3]>=2 ? 1 : 0;\n    i3 = simplex\[c]\[0]>=1 ? 1 : 0;\n    j3 = simplex\[c]\[1]>=1 ? 1 : 0;\n    k3 = simplex\[c]\[2]>=1 ? 1 : 0;\n    l3 = simplex\[c]\[3]>=1 ? 1 : 0;\n    float x1 = x0 - i1 + G4;\n    float y1 = y0 - j1 + G4;\n    float z1 = z0 - k1 + G4;\n    float w1 = w0 - l1 + G4;\n    float x2 = x0 - i2 + 2.0*G4;\n    float y2 = y0 - j2 + 2.0*G4;\n    float z2 = z0 - k2 + 2.0*G4;\n    float w2 = w0 - l2 + 2.0*G4;\n    float x3 = x0 - i3 + 3.0*G4;\n    float y3 = y0 - j3 + 3.0*G4;\n    float z3 = z0 - k3 + 3.0*G4;\n    float w3 = w0 - l3 + 3.0*G4;\n    float x4 = x0 - 1.0 + 4.0*G4;\n    float y4 = y0 - 1.0 + 4.0*G4;\n    float z4 = z0 - 1.0 + 4.0*G4;\n    float w4 = w0 - 1.0 + 4.0*G4;\n    int ii = i & 255;\n    int jj = j & 255;\n    int kk = k & 255;\n    int ll = l & 255;\n    int gi0 = perm\[ii+perm\[jj+perm\[kk+perm\[ll]]]] % 32;\n    int gi1 = perm\[ii+i1+perm\[jj+j1+perm\[kk+k1+perm\[ll+l1]]]] % 32;\n    int gi2 = perm\[ii+i2+perm\[jj+j2+perm\[kk+k2+perm\[ll+l2]]]] % 32;\n    int gi3 = perm\[ii+i3+perm\[jj+j3+perm\[kk+k3+perm\[ll+l3]]]] % 32;\n    int gi4 = perm\[ii+1+perm\[jj+1+perm\[kk+1+perm\[ll+1]]]] % 32;\n    float t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;\n    if(t0<0) n0 = 0.0;\n    else \{\n        t0 *= t0;\n        n0 = t0 * t0 * dot(float4(grad4\[gi0]\[0],grad4\[gi0]\[2],grad4\[gi0]\[3],grad4\[gi0]\[3]), float4(x0, y0, z0, w0));\n    \}\n    float t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;\n    if(t1<0) n1 = 0.0;\n    else \{\n        t1 *= t1;\n        n1 = t1 * t1 * dot(float4(grad4\[gi1]\[0],grad4\[gi1]\[2],grad4\[gi1]\[3],grad4\[gi1]\[3]), float4(x1, y1, z1, w1));\n    \}\n    float t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;\n    if(t2<0) n2 = 0.0;\n    else \{\n        t2 *= t2;\n        n2 = t2 * t2 * dot(float4(grad4\[gi2]\[0],grad4\[gi2]\[2],grad4\[gi2]\[3],grad4\[gi2]\[3]), float4(x2, y2, z2, w2));\n    \}\n    float t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;\n    if(t3<0) n3 = 0.0;\n    else \{\n        t3 *= t3;\n        n3 = t3 * t3 * dot(float4(grad4\[gi3]\[0],grad4\[gi3]\[2],grad4\[gi3]\[3],grad4\[gi3]\[3]), float4(x3, y3, z3, w3));\n    \}\n    float t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;\n    if(t4<0) n4 = 0.0;\n    else \{\n        t4 *= t4;\n        n4 = t4 * t4 * dot(float4(grad4\[gi4]\[0],grad4\[gi4]\[2],grad4\[gi4]\[3],grad4\[gi4]\[3]), float4(x4, y4, z4, w4));\n    \}\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n\}\n\ninline float3 Noise3D(float3 P, float w)\{\n    float x = raw_noise_4d(P.x, P.y, P.z, w);\n    float y = raw_noise_4d(P.x, P.y, P.z, w+20.0);\n    float z = raw_noise_4d(P.x, P.y, P.z, w+40.0);\n    return float3(x,y,z);\n\}\n\n\nkernel ParticleRenderKernel : ImageComputationKernel<ePixelWise>\{\n  Image<eRead, eAccessPoint> p_position;\n  Image<eRead, eAccessPoint> p_color;\n  Image<eRead, eAccessPoint> p_size;\n  Image<eRead, eAccessPoint> p_velocity;\n  Image<eRead, eAccessPoint> p_id;\n  Image<eRead, eAccessRandom, eEdgeClamped> cam_v;\n//   Image<eRead, eAccessRandom, eEdgeConstant> texture;\n  Image<eWrite, eAccessRandom> output;\n  param:\n    float4x4 _worldToScreen;\n\n    float _size;\n    float _minSize;\n    int _maxSteps;\n    float spacing;\n    float _shutter;\n    float _shutter_offset;\n    int _merge_operation;\n    int _screen_space_scale;\n    int _shutter_type;\n    int _duplicates_num;\n    float _duplicate_radius;\n\n    float haperture;\n    float focal;\n\n    float near;\n    float near_falloff;\n    float far;\n    float far_falloff;\n    float falloff_gamma;\n\n  local:\n    int _w, _h;\n    float2 out_res;\n    // int tex_w, tex_h;\n    float pixelsPerWorldUnit;\n  void define() \{\n    defineParam(_worldToScreen, \"_worldToScreen\", float4x4(1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f) );\n    // where the fuck did that spawn from\n    defineParam(_size, \"paSize\", 3.0f);\n    defineParam(_minSize, \"minSize\", 1.0f);\n    defineParam(_maxSteps, \"Steps\", 10);\n    defineParam(spacing, \"spacing\", 1.0f);\n    defineParam(_shutter, \"shutter\", 0.5f);\n    defineParam(_shutter_offset, \"shutter_offset\", 0.0f);\n    defineParam(_shutter_type, \"shutter_type\", 0);\n    defineParam(_duplicates_num, \"duplicates_num\", 0);\n    defineParam(_duplicate_radius, \"duplicate_radius\", 1.0f);\n    defineParam(_merge_operation, \"merge_operation\", 0);\n    defineParam(_screen_space_scale, \"screen_space_scale\", 0);\n    defineParam(haperture, \"haperture\", 24.576f);\n    defineParam(focal, \"focal\", 24.0f);\n    defineParam(near, \"near\", 0.0f);\n    defineParam(near_falloff, \"near_falloff\", 0.0f);\n    defineParam(far, \"far\", 1000.0f);\n    defineParam(far_falloff, \"far_falloff\", 0.0f);\n    defineParam(falloff_gamma, \"falloff_gamma\", 1.0f);\n    \n  \}\n  float4 srcOver( float4 a, float4 b ) \{\n    return (1.0f-a.w)*b + a;\n  \}\n  float2 transform( float3 p )\{\n    float4 r = _worldToScreen*float4(p.x, p.y, p.z, 1.0);\n    float2 xy = float2(r.x, r.y)/r.w;\n    return xy;\n  \}\n  float3 transformz( float3 p )\{\n    float4 r = _worldToScreen*float4(p.x, p.y, p.z, 1.0);\n    float2 xy = float2(r.x, r.y)/r.w;\n    float depth = r.w;\n    return float3(xy, depth);\n  \}  \n  float smoothstep( float a, float b, float x ) \{\n    float t = clamp((x - a) / (b - a), 0.0, 1.0);\n    return t*t * (3.0f - 2.0f*t);\n  \}\n\n  float lerp(float a, float b, float t)\{\n    return a + t * (b-a);\n  \}\n  float2 lerp(float2 a, float2 b, float t) \{\n     return a + t * (b - a);\n  \}\n\n\n\n  void init()\n  \{\n    _w = output.bounds.width();\n    _h = output.bounds.height();\n    out_res = float2(float(_w), float(_h));\n\n    // tex_w = texture.bounds.width();\n    // tex_h = texture.bounds.height();\n\n    pixelsPerWorldUnit = (_w*0.5) / haperture;\n\n  \}\n  void renderPoint( float2 xy, float4 pcolor, float pointSize, float falloff )\{\n\n    float sizeSquared = pointSize*pointSize;\n    float2 f = xy-floor(xy);                            //fractional part of screen coordinate?\n    float2 g = float2(1.0f) - f;                        // complement/invert of fractional part\n    //xy = floor(xy);\n    int size = ceil(pointSize);\n    int minX = max(0, int(xy.x)-size);                  // min x coord is clamped to image x=0\n    int maxX = min(_w-1, int(xy.x)+size);               // max x coord is clamped to max image x coord\n    int minY = max(0, int(xy.y)-size);                  // etc for y coord\n    int maxY = min(_h-1, int(xy.y)+size);\n    // for loop that runs over the expected size of the point to be rendered.\n    for ( int y = minY; y <= maxY; y++ ) \{              // starting at min y until max y\n      for ( int x = minX ; x <= maxX; x++ ) \{           // starting at min x until max x\n        float2 p = float2(x, y);                        // current position in the iteration space\n        float2 d = p-xy;                                // vector from center point to the current pixel\n        float r2 = dot(d, d);                           // squared distance to from p to xy\n        // work with squares, ie squared distance and squared radius because it's faster to calculate.\n        if ( r2 < sizeSquared ) \{                       // if radius squared is smaller than size squared\n         float t = 1.0f-smoothstep(0, sizeSquared, r2);\n        t *= falloff;\n          if (_merge_operation == 0) \{\n            output(p.x, p.y) += pcolor*t;\n          \}\n          if (_merge_operation == 1)\{\n          float4 colourToAdd = pcolor * t;\n          float4 existingColour = output(p.x,p.y);\n          output(p.x, p.y) = srcOver(colourToAdd, existingColour);\n          \}\n                           // after we calculate the pixels distance, and smooth it with smoothstep\n                                                        // we write it to the output buffer with a simple plus.\n        \}\n      \}\n    \}\n  \}\n//   void renderTex( float2 xy, float4 pcolor, float pointSize, float falloff )\{\n\n//     float sizeSquared = pointSize*pointSize;\n//     float2 f = xy-floor(xy);                            //fractional part of screen coordinate?\n//     float2 g = float2(1.0f) - f;                        // complement/invert of fractional part\n//     //xy = floor(xy);\n//     int size = ceil(pointSize);\n//     int minX = max(0, int(xy.x)-size);                  // min x coord is clamped to image x=0\n//     int maxX = min(_w-1, int(xy.x)+size);               // max x coord is clamped to max image x coord\n//     int minY = max(0, int(xy.y)-size);                  // etc for y coord\n//     int maxY = min(_h-1, int(xy.y)+size);\n//     // for loop that runs over the expected size of the point to be rendered.\n//     for ( int y = minY; y <= maxY; y++ ) \{              // starting at min y until max y\n//       for ( int x = minX ; x <= maxX; x++ ) \{           // starting at min x until max x\n//         float2 p = float2(x, y);                        // current position in the iteration space\n//         //float2 uv = float2( (p.x/float(_w))*float(tex_w), ( p.y/float(_h))*float(tex_h));\n//         float u = (float(x - minX) / size) * float(tex_w);\n//         float v = (float(y - minY) / size) * float(tex_h);\n//         //float2 uv = float2(u,v);\n//         //float2 uv = float2((float(size)/p.x) * float(tex_w), (float(size)/p.y) * float(tex_h));\n        \n//         float4 texLookup = bilinear(texture, u, v);\n//           if (_merge_operation == 0) \{\n//             output(p.x, p.y) += texLookup;\n//           \}\n//           if (_merge_operation == 1)\{\n//           float4 colourToAdd = texLookup;\n//           float4 existingColour = output(p.x,p.y);\n//           output(p.x, p.y) = srcOver(colourToAdd, existingColour);\n//           \}\n//                            // after we calculate the pixels distance, and smooth it with smoothstep\n//                                                         // we write it to the output buffer with a simple plus.\n//         \}\n//       \}\n//     \}\n\n  float minMaxSmooth(float n,float ns,float f,float fs,float v)\{\n      // input variables are near, near soft, far, far soft and value\n      float output = 0.0;\n      float near = min(n, f);\n      float near_soft = max(ns, 0.0);\n      float far = max(n, f);\n      float far_soft = max(fs, 0.0);\n\n      float near_soft_absolute = near-near_soft;\n      float far_soft_absolute = far+far_soft;\n\n      if (v <= near)\{\n        output = smoothstep(near_soft_absolute,near,v);\n        \}\n      else\{\n        output = 1-smoothstep(far,far_soft_absolute,v);\n        \}\n      return output;\n  \}\n\n\n\n    float screenSpaceSize(float focal, float pixelsPerWorldUnit, float p_size, float distance)\{\n        float particleSizeOnImagePlane = (focal * p_size) / distance;\n        float particleSizeInPixels = (particleSizeOnImagePlane * pixelsPerWorldUnit);\n    return particleSizeInPixels;\n  \}  \n\n\n  void process() \{\n\n    float3 P = p_position();\n    float3 v = p_velocity();\n    float3 xyz = transformz(P);\n\n    float dist = xyz.z;\n    float3 parent_P = P;\n\t\n\tfloat2 pos_2d = transform(P);\n\tfloat4 cam_vel = cam_v(pos_2d.x, pos_2d.y);\n\tfloat2 cam_vel_2d = float2(cam_vel.x, cam_vel.y);\n\n    // optimisation conditions, render only in frustum, and positive depth (in front of camera)\n    if (dist>0.0f)\{\n\n\n\n        for (int pt = 0; pt <= _duplicates_num; pt++)\{            // duplicate points\n\n        \n        // shutter stuff\n        //P += float(pt)*.005;\n        //P += Noise3D(parent_P, float(pt))*_duplicate_radius;\n        if (pt !=0)\{\n        P += randomv2(float(pt) + float(p_id())*0.02)*_duplicate_radius;\n        \}\n\n        float3 shutter_open, shutter_close;\n        if (_shutter_type == 0) \{                   // start\n            shutter_open = P;\n            shutter_close = P+(v *_shutter);\n        \}\n        else if (_shutter_type == 1) \{              // centered\n            shutter_open = P - (v *_shutter*.5);\n            //shutter_open = P;\n            shutter_close = P + (v *_shutter*.5);\n        \}\n        else if (_shutter_type == 2) \{              // end\n            shutter_open = P;\n            shutter_close = P-(v *_shutter);\n        \}\n\n        float2 shutter_open_2d, shutter_close_2d;\n        float size_start, size_end;\n        float3 shutter_open_ndc = transformz(shutter_open);\n        float3 shutter_close_ndc = transformz(shutter_close);\n\n        shutter_open_2d = float2(shutter_open_ndc.x, shutter_open_ndc.y);\n        shutter_close_2d = float2(shutter_close_ndc.x, shutter_close_ndc.y) + cam_vel_2d;\n        //size_start = shutter_open_ndc.z;\n        //size_end = shutter_close_ndc.z;\n        if (_screen_space_scale)\{\n          size_start = max(_minSize, min(100.0f, screenSpaceSize(focal, pixelsPerWorldUnit, _size * p_size().x, shutter_open_ndc.z)));\n          size_end = max(_minSize, min(100.0f, screenSpaceSize(focal, pixelsPerWorldUnit, _size * p_size().x, shutter_close_ndc.z)));\n        \}\n        else\{\n        size_start = max(_minSize, p_size().x*_size);\n        size_end = max(_minSize, p_size().x*_size);\n        \}\n\n\n        float2 blur_vector = (shutter_close_2d-shutter_open_2d);\n        float blur_length = length(blur_vector);\n\n        // adaptive steps\n        int steps = max(1 ,min(_maxSteps, int(ceil(blur_length/min(size_start, size_end)*2.0/spacing))));\n        float2 step = blur_vector/float(steps);\n\n\n        // colour stuff\n        float depth_fade = minMaxSmooth(near, near_falloff, far, far_falloff, dist);\n        depth_fade = pow(depth_fade, falloff_gamma);\n        float4 pcolor = p_color()/ float(steps);\n\n        for (int i = 0; i <= steps; i++)\{\n            float2 draw_xy = shutter_open_2d + (step * float(i));\n            float size = lerp(size_start, size_end, float(i)/float(steps));\n            if (draw_xy.x >-size && draw_xy.y>-size && draw_xy.x < out_res.x+size && draw_xy.y < out_res.y+size)\{\n            renderPoint(draw_xy, pcolor, size, depth_fade);\n            \}\n        \}\n        \}\n\n\n    \}\n    \n\n  \}\n\};"
  name ParticleBlinkScriptRender1
  xpos 568
  ypos 591
  addUserKnob {20 User}
  addUserKnob {7 paSize l size}
  paSize {{parent.size_mult}}
  addUserKnob {3 Steps}
  Steps {{parent.max_steps}}
  addUserKnob {7 spacing}
  spacing {{parent.spacing}}
  addUserKnob {7 shutter}
  shutter {{parent.shutter}}
  addUserKnob {3 merge_operation l "merge operation"}
  merge_operation {{parent.merge_operation}}
  addUserKnob {3 screen_space_scale l "screen space scale"}
  screen_space_scale {{parent.size_mode}}
  addUserKnob {7 haperture}
  haperture {{input1.haperture}}
  addUserKnob {7 focal}
  focal {{input1.focal}}
  addUserKnob {7 near R 0.1 100}
  near 0.1
  addUserKnob {7 near_falloff l "near falloff" R 0 100}
  addUserKnob {7 far R 0 1000}
  far 1000
  addUserKnob {7 far_falloff l "far falloff" R 0 100}
  addUserKnob {7 minSize}
  minSize {{parent.min_size}}
  addUserKnob {7 shutter_offset l "shutter offset"}
  addUserKnob {3 shutter_type l "shutter type"}
  shutter_type {{parent.shutter_type}}
  addUserKnob {3 duplicates_num l "duplicates num"}
  duplicates_num {{parent.duplicates}}
  addUserKnob {7 duplicate_radius l "duplicate radius"}
  duplicate_radius {{parent.duplicate_radius}}
  addUserKnob {7 falloff_gamma l "falloff gamma"}
  falloff_gamma {{1/max(parent.falloff_gamma,0.01)}}
 }
 Output {
  name Output1
  xpos 568
  ypos 678
 }
end_group
